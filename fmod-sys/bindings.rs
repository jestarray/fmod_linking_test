/* automatically generated by rust-bindgen 0.54.1 */

pub const FMOD_VERSION: u32 = 131333;
pub const FMOD_DEBUG_LEVEL_NONE: u32 = 0;
pub const FMOD_DEBUG_LEVEL_ERROR: u32 = 1;
pub const FMOD_DEBUG_LEVEL_WARNING: u32 = 2;
pub const FMOD_DEBUG_LEVEL_LOG: u32 = 4;
pub const FMOD_DEBUG_TYPE_MEMORY: u32 = 256;
pub const FMOD_DEBUG_TYPE_FILE: u32 = 512;
pub const FMOD_DEBUG_TYPE_CODEC: u32 = 1024;
pub const FMOD_DEBUG_TYPE_TRACE: u32 = 2048;
pub const FMOD_DEBUG_DISPLAY_TIMESTAMPS: u32 = 65536;
pub const FMOD_DEBUG_DISPLAY_LINENUMBERS: u32 = 131072;
pub const FMOD_DEBUG_DISPLAY_THREAD: u32 = 262144;
pub const FMOD_MEMORY_NORMAL: u32 = 0;
pub const FMOD_MEMORY_STREAM_FILE: u32 = 1;
pub const FMOD_MEMORY_STREAM_DECODE: u32 = 2;
pub const FMOD_MEMORY_SAMPLEDATA: u32 = 4;
pub const FMOD_MEMORY_DSP_BUFFER: u32 = 8;
pub const FMOD_MEMORY_PLUGIN: u32 = 16;
pub const FMOD_MEMORY_PERSISTENT: u32 = 2097152;
pub const FMOD_MEMORY_ALL: u32 = 4294967295;
pub const FMOD_INIT_NORMAL: u32 = 0;
pub const FMOD_INIT_STREAM_FROM_UPDATE: u32 = 1;
pub const FMOD_INIT_MIX_FROM_UPDATE: u32 = 2;
pub const FMOD_INIT_3D_RIGHTHANDED: u32 = 4;
pub const FMOD_INIT_CHANNEL_LOWPASS: u32 = 256;
pub const FMOD_INIT_CHANNEL_DISTANCEFILTER: u32 = 512;
pub const FMOD_INIT_PROFILE_ENABLE: u32 = 65536;
pub const FMOD_INIT_VOL0_BECOMES_VIRTUAL: u32 = 131072;
pub const FMOD_INIT_GEOMETRY_USECLOSEST: u32 = 262144;
pub const FMOD_INIT_PREFER_DOLBY_DOWNMIX: u32 = 524288;
pub const FMOD_INIT_THREAD_UNSAFE: u32 = 1048576;
pub const FMOD_INIT_PROFILE_METER_ALL: u32 = 2097152;
pub const FMOD_INIT_MEMORY_TRACKING: u32 = 4194304;
pub const FMOD_DRIVER_STATE_CONNECTED: u32 = 1;
pub const FMOD_DRIVER_STATE_DEFAULT: u32 = 2;
pub const FMOD_TIMEUNIT_MS: u32 = 1;
pub const FMOD_TIMEUNIT_PCM: u32 = 2;
pub const FMOD_TIMEUNIT_PCMBYTES: u32 = 4;
pub const FMOD_TIMEUNIT_RAWBYTES: u32 = 8;
pub const FMOD_TIMEUNIT_PCMFRACTION: u32 = 16;
pub const FMOD_TIMEUNIT_MODORDER: u32 = 256;
pub const FMOD_TIMEUNIT_MODROW: u32 = 512;
pub const FMOD_TIMEUNIT_MODPATTERN: u32 = 1024;
pub const FMOD_SYSTEM_CALLBACK_DEVICELISTCHANGED: u32 = 1;
pub const FMOD_SYSTEM_CALLBACK_DEVICELOST: u32 = 2;
pub const FMOD_SYSTEM_CALLBACK_MEMORYALLOCATIONFAILED: u32 = 4;
pub const FMOD_SYSTEM_CALLBACK_THREADCREATED: u32 = 8;
pub const FMOD_SYSTEM_CALLBACK_BADDSPCONNECTION: u32 = 16;
pub const FMOD_SYSTEM_CALLBACK_PREMIX: u32 = 32;
pub const FMOD_SYSTEM_CALLBACK_POSTMIX: u32 = 64;
pub const FMOD_SYSTEM_CALLBACK_ERROR: u32 = 128;
pub const FMOD_SYSTEM_CALLBACK_MIDMIX: u32 = 256;
pub const FMOD_SYSTEM_CALLBACK_THREADDESTROYED: u32 = 512;
pub const FMOD_SYSTEM_CALLBACK_PREUPDATE: u32 = 1024;
pub const FMOD_SYSTEM_CALLBACK_POSTUPDATE: u32 = 2048;
pub const FMOD_SYSTEM_CALLBACK_RECORDLISTCHANGED: u32 = 4096;
pub const FMOD_SYSTEM_CALLBACK_ALL: u32 = 4294967295;
pub const FMOD_DEFAULT: u32 = 0;
pub const FMOD_LOOP_OFF: u32 = 1;
pub const FMOD_LOOP_NORMAL: u32 = 2;
pub const FMOD_LOOP_BIDI: u32 = 4;
pub const FMOD_2D: u32 = 8;
pub const FMOD_3D: u32 = 16;
pub const FMOD_CREATESTREAM: u32 = 128;
pub const FMOD_CREATESAMPLE: u32 = 256;
pub const FMOD_CREATECOMPRESSEDSAMPLE: u32 = 512;
pub const FMOD_OPENUSER: u32 = 1024;
pub const FMOD_OPENMEMORY: u32 = 2048;
pub const FMOD_OPENMEMORY_POINT: u32 = 268435456;
pub const FMOD_OPENRAW: u32 = 4096;
pub const FMOD_OPENONLY: u32 = 8192;
pub const FMOD_ACCURATETIME: u32 = 16384;
pub const FMOD_MPEGSEARCH: u32 = 32768;
pub const FMOD_NONBLOCKING: u32 = 65536;
pub const FMOD_UNIQUE: u32 = 131072;
pub const FMOD_3D_HEADRELATIVE: u32 = 262144;
pub const FMOD_3D_WORLDRELATIVE: u32 = 524288;
pub const FMOD_3D_INVERSEROLLOFF: u32 = 1048576;
pub const FMOD_3D_LINEARROLLOFF: u32 = 2097152;
pub const FMOD_3D_LINEARSQUAREROLLOFF: u32 = 4194304;
pub const FMOD_3D_INVERSETAPEREDROLLOFF: u32 = 8388608;
pub const FMOD_3D_CUSTOMROLLOFF: u32 = 67108864;
pub const FMOD_3D_IGNOREGEOMETRY: u32 = 1073741824;
pub const FMOD_IGNORETAGS: u32 = 33554432;
pub const FMOD_LOWMEM: u32 = 134217728;
pub const FMOD_VIRTUAL_PLAYFROMSTART: u32 = 2147483648;
pub const FMOD_CHANNELMASK_FRONT_LEFT: u32 = 1;
pub const FMOD_CHANNELMASK_FRONT_RIGHT: u32 = 2;
pub const FMOD_CHANNELMASK_FRONT_CENTER: u32 = 4;
pub const FMOD_CHANNELMASK_LOW_FREQUENCY: u32 = 8;
pub const FMOD_CHANNELMASK_SURROUND_LEFT: u32 = 16;
pub const FMOD_CHANNELMASK_SURROUND_RIGHT: u32 = 32;
pub const FMOD_CHANNELMASK_BACK_LEFT: u32 = 64;
pub const FMOD_CHANNELMASK_BACK_RIGHT: u32 = 128;
pub const FMOD_CHANNELMASK_BACK_CENTER: u32 = 256;
pub const FMOD_CHANNELMASK_MONO: u32 = 1;
pub const FMOD_CHANNELMASK_STEREO: u32 = 3;
pub const FMOD_CHANNELMASK_LRC: u32 = 7;
pub const FMOD_CHANNELMASK_QUAD: u32 = 51;
pub const FMOD_CHANNELMASK_SURROUND: u32 = 55;
pub const FMOD_CHANNELMASK_5POINT1: u32 = 63;
pub const FMOD_CHANNELMASK_5POINT1_REARS: u32 = 207;
pub const FMOD_CHANNELMASK_7POINT0: u32 = 247;
pub const FMOD_CHANNELMASK_7POINT1: u32 = 255;
pub const FMOD_THREAD_PRIORITY_PLATFORM_MIN: i32 = -32768;
pub const FMOD_THREAD_PRIORITY_PLATFORM_MAX: u32 = 32768;
pub const FMOD_THREAD_PRIORITY_DEFAULT: i32 = -32769;
pub const FMOD_THREAD_PRIORITY_LOW: i32 = -32770;
pub const FMOD_THREAD_PRIORITY_MEDIUM: i32 = -32771;
pub const FMOD_THREAD_PRIORITY_HIGH: i32 = -32772;
pub const FMOD_THREAD_PRIORITY_VERY_HIGH: i32 = -32773;
pub const FMOD_THREAD_PRIORITY_EXTREME: i32 = -32774;
pub const FMOD_THREAD_PRIORITY_CRITICAL: i32 = -32775;
pub const FMOD_THREAD_PRIORITY_MIXER: i32 = -32774;
pub const FMOD_THREAD_PRIORITY_FEEDER: i32 = -32775;
pub const FMOD_THREAD_PRIORITY_STREAM: i32 = -32773;
pub const FMOD_THREAD_PRIORITY_FILE: i32 = -32772;
pub const FMOD_THREAD_PRIORITY_NONBLOCKING: i32 = -32772;
pub const FMOD_THREAD_PRIORITY_RECORD: i32 = -32772;
pub const FMOD_THREAD_PRIORITY_GEOMETRY: i32 = -32770;
pub const FMOD_THREAD_PRIORITY_PROFILER: i32 = -32771;
pub const FMOD_THREAD_PRIORITY_STUDIO_UPDATE: i32 = -32771;
pub const FMOD_THREAD_PRIORITY_STUDIO_LOAD_BANK: i32 = -32771;
pub const FMOD_THREAD_PRIORITY_STUDIO_LOAD_SAMPLE: i32 = -32771;
pub const FMOD_THREAD_PRIORITY_CONVOLUTION1: i32 = -32773;
pub const FMOD_THREAD_PRIORITY_CONVOLUTION2: i32 = -32773;
pub const FMOD_THREAD_STACK_SIZE_DEFAULT: u32 = 0;
pub const FMOD_THREAD_STACK_SIZE_MIXER: u32 = 81920;
pub const FMOD_THREAD_STACK_SIZE_FEEDER: u32 = 16384;
pub const FMOD_THREAD_STACK_SIZE_STREAM: u32 = 98304;
pub const FMOD_THREAD_STACK_SIZE_FILE: u32 = 49152;
pub const FMOD_THREAD_STACK_SIZE_NONBLOCKING: u32 = 114688;
pub const FMOD_THREAD_STACK_SIZE_RECORD: u32 = 16384;
pub const FMOD_THREAD_STACK_SIZE_GEOMETRY: u32 = 49152;
pub const FMOD_THREAD_STACK_SIZE_PROFILER: u32 = 131072;
pub const FMOD_THREAD_STACK_SIZE_STUDIO_UPDATE: u32 = 98304;
pub const FMOD_THREAD_STACK_SIZE_STUDIO_LOAD_BANK: u32 = 98304;
pub const FMOD_THREAD_STACK_SIZE_STUDIO_LOAD_SAMPLE: u32 = 98304;
pub const FMOD_THREAD_STACK_SIZE_CONVOLUTION1: u32 = 16384;
pub const FMOD_THREAD_STACK_SIZE_CONVOLUTION2: u32 = 16384;
pub const FMOD_THREAD_AFFINITY_GROUP_DEFAULT: i64 = -9223372036854775808;
pub const FMOD_THREAD_AFFINITY_GROUP_A: i64 = -9223372036854775807;
pub const FMOD_THREAD_AFFINITY_GROUP_B: i64 = -9223372036854775806;
pub const FMOD_THREAD_AFFINITY_GROUP_C: i64 = -9223372036854775805;
pub const FMOD_THREAD_AFFINITY_MIXER: i64 = -9223372036854775807;
pub const FMOD_THREAD_AFFINITY_FEEDER: i64 = -9223372036854775805;
pub const FMOD_THREAD_AFFINITY_STREAM: i64 = -9223372036854775805;
pub const FMOD_THREAD_AFFINITY_FILE: i64 = -9223372036854775805;
pub const FMOD_THREAD_AFFINITY_NONBLOCKING: i64 = -9223372036854775805;
pub const FMOD_THREAD_AFFINITY_RECORD: i64 = -9223372036854775805;
pub const FMOD_THREAD_AFFINITY_GEOMETRY: i64 = -9223372036854775805;
pub const FMOD_THREAD_AFFINITY_PROFILER: i64 = -9223372036854775805;
pub const FMOD_THREAD_AFFINITY_STUDIO_UPDATE: i64 = -9223372036854775806;
pub const FMOD_THREAD_AFFINITY_STUDIO_LOAD_BANK: i64 = -9223372036854775805;
pub const FMOD_THREAD_AFFINITY_STUDIO_LOAD_SAMPLE: i64 = -9223372036854775805;
pub const FMOD_THREAD_AFFINITY_CONVOLUTION1: i64 = -9223372036854775805;
pub const FMOD_THREAD_AFFINITY_CONVOLUTION2: i64 = -9223372036854775805;
pub const FMOD_THREAD_AFFINITY_CORE_ALL: u32 = 0;
pub const FMOD_THREAD_AFFINITY_CORE_0: u32 = 1;
pub const FMOD_THREAD_AFFINITY_CORE_1: u32 = 2;
pub const FMOD_THREAD_AFFINITY_CORE_2: u32 = 4;
pub const FMOD_THREAD_AFFINITY_CORE_3: u32 = 8;
pub const FMOD_THREAD_AFFINITY_CORE_4: u32 = 16;
pub const FMOD_THREAD_AFFINITY_CORE_5: u32 = 32;
pub const FMOD_THREAD_AFFINITY_CORE_6: u32 = 64;
pub const FMOD_THREAD_AFFINITY_CORE_7: u32 = 128;
pub const FMOD_THREAD_AFFINITY_CORE_8: u32 = 256;
pub const FMOD_THREAD_AFFINITY_CORE_9: u32 = 512;
pub const FMOD_THREAD_AFFINITY_CORE_10: u32 = 1024;
pub const FMOD_THREAD_AFFINITY_CORE_11: u32 = 2048;
pub const FMOD_THREAD_AFFINITY_CORE_12: u32 = 4096;
pub const FMOD_THREAD_AFFINITY_CORE_13: u32 = 8192;
pub const FMOD_THREAD_AFFINITY_CORE_14: u32 = 16384;
pub const FMOD_THREAD_AFFINITY_CORE_15: u32 = 32768;
pub const FMOD_MAX_CHANNEL_WIDTH: u32 = 32;
pub const FMOD_MAX_SYSTEMS: u32 = 8;
pub const FMOD_MAX_LISTENERS: u32 = 8;
pub const FMOD_REVERB_MAXINSTANCES: u32 = 4;
pub const FMOD_PORT_INDEX_NONE: i32 = -1;
pub const FMOD_CODEC_WAVEFORMAT_VERSION: u32 = 3;
pub const FMOD_PLUGIN_SDK_VERSION: u32 = 110;
pub const FMOD_DSP_GETPARAM_VALUESTR_LENGTH: u32 = 32;
pub const FMOD_OUTPUT_PLUGIN_VERSION: u32 = 4;
pub const FMOD_OUTPUT_METHOD_MIX_DIRECT: u32 = 0;
pub const FMOD_OUTPUT_METHOD_POLLING: u32 = 1;
pub const FMOD_OUTPUT_METHOD_MIX_BUFFERED: u32 = 2;
pub const FMOD_STUDIO_LOAD_MEMORY_ALIGNMENT: u32 = 32;
pub const FMOD_STUDIO_INIT_NORMAL: u32 = 0;
pub const FMOD_STUDIO_INIT_LIVEUPDATE: u32 = 1;
pub const FMOD_STUDIO_INIT_ALLOW_MISSING_PLUGINS: u32 = 2;
pub const FMOD_STUDIO_INIT_SYNCHRONOUS_UPDATE: u32 = 4;
pub const FMOD_STUDIO_INIT_DEFERRED_CALLBACKS: u32 = 8;
pub const FMOD_STUDIO_INIT_LOAD_FROM_UPDATE: u32 = 16;
pub const FMOD_STUDIO_INIT_MEMORY_TRACKING: u32 = 32;
pub const FMOD_STUDIO_PARAMETER_READONLY: u32 = 1;
pub const FMOD_STUDIO_PARAMETER_AUTOMATIC: u32 = 2;
pub const FMOD_STUDIO_PARAMETER_GLOBAL: u32 = 4;
pub const FMOD_STUDIO_PARAMETER_DISCRETE: u32 = 8;
pub const FMOD_STUDIO_SYSTEM_CALLBACK_PREUPDATE: u32 = 1;
pub const FMOD_STUDIO_SYSTEM_CALLBACK_POSTUPDATE: u32 = 2;
pub const FMOD_STUDIO_SYSTEM_CALLBACK_BANK_UNLOAD: u32 = 4;
pub const FMOD_STUDIO_SYSTEM_CALLBACK_ALL: u32 = 4294967295;
pub const FMOD_STUDIO_EVENT_CALLBACK_CREATED: u32 = 1;
pub const FMOD_STUDIO_EVENT_CALLBACK_DESTROYED: u32 = 2;
pub const FMOD_STUDIO_EVENT_CALLBACK_STARTING: u32 = 4;
pub const FMOD_STUDIO_EVENT_CALLBACK_STARTED: u32 = 8;
pub const FMOD_STUDIO_EVENT_CALLBACK_RESTARTED: u32 = 16;
pub const FMOD_STUDIO_EVENT_CALLBACK_STOPPED: u32 = 32;
pub const FMOD_STUDIO_EVENT_CALLBACK_START_FAILED: u32 = 64;
pub const FMOD_STUDIO_EVENT_CALLBACK_CREATE_PROGRAMMER_SOUND: u32 = 128;
pub const FMOD_STUDIO_EVENT_CALLBACK_DESTROY_PROGRAMMER_SOUND: u32 = 256;
pub const FMOD_STUDIO_EVENT_CALLBACK_PLUGIN_CREATED: u32 = 512;
pub const FMOD_STUDIO_EVENT_CALLBACK_PLUGIN_DESTROYED: u32 = 1024;
pub const FMOD_STUDIO_EVENT_CALLBACK_TIMELINE_MARKER: u32 = 2048;
pub const FMOD_STUDIO_EVENT_CALLBACK_TIMELINE_BEAT: u32 = 4096;
pub const FMOD_STUDIO_EVENT_CALLBACK_SOUND_PLAYED: u32 = 8192;
pub const FMOD_STUDIO_EVENT_CALLBACK_SOUND_STOPPED: u32 = 16384;
pub const FMOD_STUDIO_EVENT_CALLBACK_REAL_TO_VIRTUAL: u32 = 32768;
pub const FMOD_STUDIO_EVENT_CALLBACK_VIRTUAL_TO_REAL: u32 = 65536;
pub const FMOD_STUDIO_EVENT_CALLBACK_START_EVENT_COMMAND: u32 = 131072;
pub const FMOD_STUDIO_EVENT_CALLBACK_ALL: u32 = 4294967295;
pub const FMOD_STUDIO_LOAD_BANK_NORMAL: u32 = 0;
pub const FMOD_STUDIO_LOAD_BANK_NONBLOCKING: u32 = 1;
pub const FMOD_STUDIO_LOAD_BANK_DECOMPRESS_SAMPLES: u32 = 2;
pub const FMOD_STUDIO_LOAD_BANK_UNENCRYPTED: u32 = 4;
pub const FMOD_STUDIO_COMMANDCAPTURE_NORMAL: u32 = 0;
pub const FMOD_STUDIO_COMMANDCAPTURE_FILEFLUSH: u32 = 1;
pub const FMOD_STUDIO_COMMANDCAPTURE_SKIP_INITIAL_STATE: u32 = 2;
pub const FMOD_STUDIO_COMMANDREPLAY_NORMAL: u32 = 0;
pub const FMOD_STUDIO_COMMANDREPLAY_SKIP_CLEANUP: u32 = 1;
pub const FMOD_STUDIO_COMMANDREPLAY_FAST_FORWARD: u32 = 2;
pub const FMOD_STUDIO_COMMANDREPLAY_SKIP_BANK_LOAD: u32 = 4;
pub type FMOD_BOOL = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_SYSTEM {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_SOUND {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_CHANNELCONTROL {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_CHANNEL {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_CHANNELGROUP {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_SOUNDGROUP {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_REVERB3D {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSPCONNECTION {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_POLYGON {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_GEOMETRY {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_SYNCPOINT {
    _unused: [u8; 0],
}
pub type FMOD_PORT_TYPE = ::std::os::raw::c_uint;
pub type FMOD_PORT_INDEX = ::std::os::raw::c_ulonglong;
pub type FMOD_DEBUG_FLAGS = ::std::os::raw::c_uint;
pub type FMOD_MEMORY_TYPE = ::std::os::raw::c_uint;
pub type FMOD_INITFLAGS = ::std::os::raw::c_uint;
pub type FMOD_DRIVER_STATE = ::std::os::raw::c_uint;
pub type FMOD_TIMEUNIT = ::std::os::raw::c_uint;
pub type FMOD_SYSTEM_CALLBACK_TYPE = ::std::os::raw::c_uint;
pub type FMOD_MODE = ::std::os::raw::c_uint;
pub type FMOD_CHANNELMASK = ::std::os::raw::c_uint;
pub type FMOD_THREAD_PRIORITY = ::std::os::raw::c_int;
pub type FMOD_THREAD_STACK_SIZE = ::std::os::raw::c_uint;
pub type FMOD_THREAD_AFFINITY = ::std::os::raw::c_ulonglong;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_THREAD_TYPE {
    FMOD_THREAD_TYPE_MIXER = 0,
    FMOD_THREAD_TYPE_FEEDER = 1,
    FMOD_THREAD_TYPE_STREAM = 2,
    FMOD_THREAD_TYPE_FILE = 3,
    FMOD_THREAD_TYPE_NONBLOCKING = 4,
    FMOD_THREAD_TYPE_RECORD = 5,
    FMOD_THREAD_TYPE_GEOMETRY = 6,
    FMOD_THREAD_TYPE_PROFILER = 7,
    FMOD_THREAD_TYPE_STUDIO_UPDATE = 8,
    FMOD_THREAD_TYPE_STUDIO_LOAD_BANK = 9,
    FMOD_THREAD_TYPE_STUDIO_LOAD_SAMPLE = 10,
    FMOD_THREAD_TYPE_CONVOLUTION1 = 11,
    FMOD_THREAD_TYPE_CONVOLUTION2 = 12,
    FMOD_THREAD_TYPE_MAX = 13,
    FMOD_THREAD_TYPE_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_RESULT {
    FMOD_OK = 0,
    FMOD_ERR_BADCOMMAND = 1,
    FMOD_ERR_CHANNEL_ALLOC = 2,
    FMOD_ERR_CHANNEL_STOLEN = 3,
    FMOD_ERR_DMA = 4,
    FMOD_ERR_DSP_CONNECTION = 5,
    FMOD_ERR_DSP_DONTPROCESS = 6,
    FMOD_ERR_DSP_FORMAT = 7,
    FMOD_ERR_DSP_INUSE = 8,
    FMOD_ERR_DSP_NOTFOUND = 9,
    FMOD_ERR_DSP_RESERVED = 10,
    FMOD_ERR_DSP_SILENCE = 11,
    FMOD_ERR_DSP_TYPE = 12,
    FMOD_ERR_FILE_BAD = 13,
    FMOD_ERR_FILE_COULDNOTSEEK = 14,
    FMOD_ERR_FILE_DISKEJECTED = 15,
    FMOD_ERR_FILE_EOF = 16,
    FMOD_ERR_FILE_ENDOFDATA = 17,
    FMOD_ERR_FILE_NOTFOUND = 18,
    FMOD_ERR_FORMAT = 19,
    FMOD_ERR_HEADER_MISMATCH = 20,
    FMOD_ERR_HTTP = 21,
    FMOD_ERR_HTTP_ACCESS = 22,
    FMOD_ERR_HTTP_PROXY_AUTH = 23,
    FMOD_ERR_HTTP_SERVER_ERROR = 24,
    FMOD_ERR_HTTP_TIMEOUT = 25,
    FMOD_ERR_INITIALIZATION = 26,
    FMOD_ERR_INITIALIZED = 27,
    FMOD_ERR_INTERNAL = 28,
    FMOD_ERR_INVALID_FLOAT = 29,
    FMOD_ERR_INVALID_HANDLE = 30,
    FMOD_ERR_INVALID_PARAM = 31,
    FMOD_ERR_INVALID_POSITION = 32,
    FMOD_ERR_INVALID_SPEAKER = 33,
    FMOD_ERR_INVALID_SYNCPOINT = 34,
    FMOD_ERR_INVALID_THREAD = 35,
    FMOD_ERR_INVALID_VECTOR = 36,
    FMOD_ERR_MAXAUDIBLE = 37,
    FMOD_ERR_MEMORY = 38,
    FMOD_ERR_MEMORY_CANTPOINT = 39,
    FMOD_ERR_NEEDS3D = 40,
    FMOD_ERR_NEEDSHARDWARE = 41,
    FMOD_ERR_NET_CONNECT = 42,
    FMOD_ERR_NET_SOCKET_ERROR = 43,
    FMOD_ERR_NET_URL = 44,
    FMOD_ERR_NET_WOULD_BLOCK = 45,
    FMOD_ERR_NOTREADY = 46,
    FMOD_ERR_OUTPUT_ALLOCATED = 47,
    FMOD_ERR_OUTPUT_CREATEBUFFER = 48,
    FMOD_ERR_OUTPUT_DRIVERCALL = 49,
    FMOD_ERR_OUTPUT_FORMAT = 50,
    FMOD_ERR_OUTPUT_INIT = 51,
    FMOD_ERR_OUTPUT_NODRIVERS = 52,
    FMOD_ERR_PLUGIN = 53,
    FMOD_ERR_PLUGIN_MISSING = 54,
    FMOD_ERR_PLUGIN_RESOURCE = 55,
    FMOD_ERR_PLUGIN_VERSION = 56,
    FMOD_ERR_RECORD = 57,
    FMOD_ERR_REVERB_CHANNELGROUP = 58,
    FMOD_ERR_REVERB_INSTANCE = 59,
    FMOD_ERR_SUBSOUNDS = 60,
    FMOD_ERR_SUBSOUND_ALLOCATED = 61,
    FMOD_ERR_SUBSOUND_CANTMOVE = 62,
    FMOD_ERR_TAGNOTFOUND = 63,
    FMOD_ERR_TOOMANYCHANNELS = 64,
    FMOD_ERR_TRUNCATED = 65,
    FMOD_ERR_UNIMPLEMENTED = 66,
    FMOD_ERR_UNINITIALIZED = 67,
    FMOD_ERR_UNSUPPORTED = 68,
    FMOD_ERR_VERSION = 69,
    FMOD_ERR_EVENT_ALREADY_LOADED = 70,
    FMOD_ERR_EVENT_LIVEUPDATE_BUSY = 71,
    FMOD_ERR_EVENT_LIVEUPDATE_MISMATCH = 72,
    FMOD_ERR_EVENT_LIVEUPDATE_TIMEOUT = 73,
    FMOD_ERR_EVENT_NOTFOUND = 74,
    FMOD_ERR_STUDIO_UNINITIALIZED = 75,
    FMOD_ERR_STUDIO_NOT_LOADED = 76,
    FMOD_ERR_INVALID_STRING = 77,
    FMOD_ERR_ALREADY_LOCKED = 78,
    FMOD_ERR_NOT_LOCKED = 79,
    FMOD_ERR_RECORD_DISCONNECTED = 80,
    FMOD_ERR_TOOMANYSAMPLES = 81,
    FMOD_RESULT_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_CHANNELCONTROL_TYPE {
    FMOD_CHANNELCONTROL_CHANNEL = 0,
    FMOD_CHANNELCONTROL_CHANNELGROUP = 1,
    FMOD_CHANNELCONTROL_MAX = 2,
    FMOD_CHANNELCONTROL_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_OUTPUTTYPE {
    FMOD_OUTPUTTYPE_AUTODETECT = 0,
    FMOD_OUTPUTTYPE_UNKNOWN = 1,
    FMOD_OUTPUTTYPE_NOSOUND = 2,
    FMOD_OUTPUTTYPE_WAVWRITER = 3,
    FMOD_OUTPUTTYPE_NOSOUND_NRT = 4,
    FMOD_OUTPUTTYPE_WAVWRITER_NRT = 5,
    FMOD_OUTPUTTYPE_WASAPI = 6,
    FMOD_OUTPUTTYPE_ASIO = 7,
    FMOD_OUTPUTTYPE_PULSEAUDIO = 8,
    FMOD_OUTPUTTYPE_ALSA = 9,
    FMOD_OUTPUTTYPE_COREAUDIO = 10,
    FMOD_OUTPUTTYPE_AUDIOTRACK = 11,
    FMOD_OUTPUTTYPE_OPENSL = 12,
    FMOD_OUTPUTTYPE_AUDIOOUT = 13,
    FMOD_OUTPUTTYPE_AUDIO3D = 14,
    FMOD_OUTPUTTYPE_WEBAUDIO = 15,
    FMOD_OUTPUTTYPE_NNAUDIO = 16,
    FMOD_OUTPUTTYPE_WINSONIC = 17,
    FMOD_OUTPUTTYPE_AAUDIO = 18,
    FMOD_OUTPUTTYPE_MAX = 19,
    FMOD_OUTPUTTYPE_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DEBUG_MODE {
    FMOD_DEBUG_MODE_TTY = 0,
    FMOD_DEBUG_MODE_FILE = 1,
    FMOD_DEBUG_MODE_CALLBACK = 2,
    FMOD_DEBUG_MODE_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_SPEAKERMODE {
    FMOD_SPEAKERMODE_DEFAULT = 0,
    FMOD_SPEAKERMODE_RAW = 1,
    FMOD_SPEAKERMODE_MONO = 2,
    FMOD_SPEAKERMODE_STEREO = 3,
    FMOD_SPEAKERMODE_QUAD = 4,
    FMOD_SPEAKERMODE_SURROUND = 5,
    FMOD_SPEAKERMODE_5POINT1 = 6,
    FMOD_SPEAKERMODE_7POINT1 = 7,
    FMOD_SPEAKERMODE_7POINT1POINT4 = 8,
    FMOD_SPEAKERMODE_MAX = 9,
    FMOD_SPEAKERMODE_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_SPEAKER {
    FMOD_SPEAKER_NONE = -1,
    FMOD_SPEAKER_FRONT_LEFT = 0,
    FMOD_SPEAKER_FRONT_RIGHT = 1,
    FMOD_SPEAKER_FRONT_CENTER = 2,
    FMOD_SPEAKER_LOW_FREQUENCY = 3,
    FMOD_SPEAKER_SURROUND_LEFT = 4,
    FMOD_SPEAKER_SURROUND_RIGHT = 5,
    FMOD_SPEAKER_BACK_LEFT = 6,
    FMOD_SPEAKER_BACK_RIGHT = 7,
    FMOD_SPEAKER_TOP_FRONT_LEFT = 8,
    FMOD_SPEAKER_TOP_FRONT_RIGHT = 9,
    FMOD_SPEAKER_TOP_BACK_LEFT = 10,
    FMOD_SPEAKER_TOP_BACK_RIGHT = 11,
    FMOD_SPEAKER_MAX = 12,
    FMOD_SPEAKER_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_CHANNELORDER {
    FMOD_CHANNELORDER_DEFAULT = 0,
    FMOD_CHANNELORDER_WAVEFORMAT = 1,
    FMOD_CHANNELORDER_PROTOOLS = 2,
    FMOD_CHANNELORDER_ALLMONO = 3,
    FMOD_CHANNELORDER_ALLSTEREO = 4,
    FMOD_CHANNELORDER_ALSA = 5,
    FMOD_CHANNELORDER_MAX = 6,
    FMOD_CHANNELORDER_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_PLUGINTYPE {
    FMOD_PLUGINTYPE_OUTPUT = 0,
    FMOD_PLUGINTYPE_CODEC = 1,
    FMOD_PLUGINTYPE_DSP = 2,
    FMOD_PLUGINTYPE_MAX = 3,
    FMOD_PLUGINTYPE_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_SOUND_TYPE {
    FMOD_SOUND_TYPE_UNKNOWN = 0,
    FMOD_SOUND_TYPE_AIFF = 1,
    FMOD_SOUND_TYPE_ASF = 2,
    FMOD_SOUND_TYPE_DLS = 3,
    FMOD_SOUND_TYPE_FLAC = 4,
    FMOD_SOUND_TYPE_FSB = 5,
    FMOD_SOUND_TYPE_IT = 6,
    FMOD_SOUND_TYPE_MIDI = 7,
    FMOD_SOUND_TYPE_MOD = 8,
    FMOD_SOUND_TYPE_MPEG = 9,
    FMOD_SOUND_TYPE_OGGVORBIS = 10,
    FMOD_SOUND_TYPE_PLAYLIST = 11,
    FMOD_SOUND_TYPE_RAW = 12,
    FMOD_SOUND_TYPE_S3M = 13,
    FMOD_SOUND_TYPE_USER = 14,
    FMOD_SOUND_TYPE_WAV = 15,
    FMOD_SOUND_TYPE_XM = 16,
    FMOD_SOUND_TYPE_XMA = 17,
    FMOD_SOUND_TYPE_AUDIOQUEUE = 18,
    FMOD_SOUND_TYPE_AT9 = 19,
    FMOD_SOUND_TYPE_VORBIS = 20,
    FMOD_SOUND_TYPE_MEDIA_FOUNDATION = 21,
    FMOD_SOUND_TYPE_MEDIACODEC = 22,
    FMOD_SOUND_TYPE_FADPCM = 23,
    FMOD_SOUND_TYPE_OPUS = 24,
    FMOD_SOUND_TYPE_MAX = 25,
    FMOD_SOUND_TYPE_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_SOUND_FORMAT {
    FMOD_SOUND_FORMAT_NONE = 0,
    FMOD_SOUND_FORMAT_PCM8 = 1,
    FMOD_SOUND_FORMAT_PCM16 = 2,
    FMOD_SOUND_FORMAT_PCM24 = 3,
    FMOD_SOUND_FORMAT_PCM32 = 4,
    FMOD_SOUND_FORMAT_PCMFLOAT = 5,
    FMOD_SOUND_FORMAT_BITSTREAM = 6,
    FMOD_SOUND_FORMAT_MAX = 7,
    FMOD_SOUND_FORMAT_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_OPENSTATE {
    FMOD_OPENSTATE_READY = 0,
    FMOD_OPENSTATE_LOADING = 1,
    FMOD_OPENSTATE_ERROR = 2,
    FMOD_OPENSTATE_CONNECTING = 3,
    FMOD_OPENSTATE_BUFFERING = 4,
    FMOD_OPENSTATE_SEEKING = 5,
    FMOD_OPENSTATE_PLAYING = 6,
    FMOD_OPENSTATE_SETPOSITION = 7,
    FMOD_OPENSTATE_MAX = 8,
    FMOD_OPENSTATE_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_SOUNDGROUP_BEHAVIOR {
    FMOD_SOUNDGROUP_BEHAVIOR_FAIL = 0,
    FMOD_SOUNDGROUP_BEHAVIOR_MUTE = 1,
    FMOD_SOUNDGROUP_BEHAVIOR_STEALLOWEST = 2,
    FMOD_SOUNDGROUP_BEHAVIOR_MAX = 3,
    FMOD_SOUNDGROUP_BEHAVIOR_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_CHANNELCONTROL_CALLBACK_TYPE {
    FMOD_CHANNELCONTROL_CALLBACK_END = 0,
    FMOD_CHANNELCONTROL_CALLBACK_VIRTUALVOICE = 1,
    FMOD_CHANNELCONTROL_CALLBACK_SYNCPOINT = 2,
    FMOD_CHANNELCONTROL_CALLBACK_OCCLUSION = 3,
    FMOD_CHANNELCONTROL_CALLBACK_MAX = 4,
    FMOD_CHANNELCONTROL_CALLBACK_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_CHANNELCONTROL_DSP_INDEX {
    FMOD_CHANNELCONTROL_DSP_HEAD = -1,
    FMOD_CHANNELCONTROL_DSP_FADER = -2,
    FMOD_CHANNELCONTROL_DSP_TAIL = -3,
    FMOD_CHANNELCONTROL_DSP_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_ERRORCALLBACK_INSTANCETYPE {
    FMOD_ERRORCALLBACK_INSTANCETYPE_NONE = 0,
    FMOD_ERRORCALLBACK_INSTANCETYPE_SYSTEM = 1,
    FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNEL = 2,
    FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNELGROUP = 3,
    FMOD_ERRORCALLBACK_INSTANCETYPE_CHANNELCONTROL = 4,
    FMOD_ERRORCALLBACK_INSTANCETYPE_SOUND = 5,
    FMOD_ERRORCALLBACK_INSTANCETYPE_SOUNDGROUP = 6,
    FMOD_ERRORCALLBACK_INSTANCETYPE_DSP = 7,
    FMOD_ERRORCALLBACK_INSTANCETYPE_DSPCONNECTION = 8,
    FMOD_ERRORCALLBACK_INSTANCETYPE_GEOMETRY = 9,
    FMOD_ERRORCALLBACK_INSTANCETYPE_REVERB3D = 10,
    FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_SYSTEM = 11,
    FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_EVENTDESCRIPTION = 12,
    FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_EVENTINSTANCE = 13,
    FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_PARAMETERINSTANCE = 14,
    FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_BUS = 15,
    FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_VCA = 16,
    FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_BANK = 17,
    FMOD_ERRORCALLBACK_INSTANCETYPE_STUDIO_COMMANDREPLAY = 18,
    FMOD_ERRORCALLBACK_INSTANCETYPE_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_RESAMPLER {
    FMOD_DSP_RESAMPLER_DEFAULT = 0,
    FMOD_DSP_RESAMPLER_NOINTERP = 1,
    FMOD_DSP_RESAMPLER_LINEAR = 2,
    FMOD_DSP_RESAMPLER_CUBIC = 3,
    FMOD_DSP_RESAMPLER_SPLINE = 4,
    FMOD_DSP_RESAMPLER_MAX = 5,
    FMOD_DSP_RESAMPLER_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSPCONNECTION_TYPE {
    FMOD_DSPCONNECTION_TYPE_STANDARD = 0,
    FMOD_DSPCONNECTION_TYPE_SIDECHAIN = 1,
    FMOD_DSPCONNECTION_TYPE_SEND = 2,
    FMOD_DSPCONNECTION_TYPE_SEND_SIDECHAIN = 3,
    FMOD_DSPCONNECTION_TYPE_MAX = 4,
    FMOD_DSPCONNECTION_TYPE_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_TAGTYPE {
    FMOD_TAGTYPE_UNKNOWN = 0,
    FMOD_TAGTYPE_ID3V1 = 1,
    FMOD_TAGTYPE_ID3V2 = 2,
    FMOD_TAGTYPE_VORBISCOMMENT = 3,
    FMOD_TAGTYPE_SHOUTCAST = 4,
    FMOD_TAGTYPE_ICECAST = 5,
    FMOD_TAGTYPE_ASF = 6,
    FMOD_TAGTYPE_MIDI = 7,
    FMOD_TAGTYPE_PLAYLIST = 8,
    FMOD_TAGTYPE_FMOD = 9,
    FMOD_TAGTYPE_USER = 10,
    FMOD_TAGTYPE_MAX = 11,
    FMOD_TAGTYPE_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_TAGDATATYPE {
    FMOD_TAGDATATYPE_BINARY = 0,
    FMOD_TAGDATATYPE_INT = 1,
    FMOD_TAGDATATYPE_FLOAT = 2,
    FMOD_TAGDATATYPE_STRING = 3,
    FMOD_TAGDATATYPE_STRING_UTF16 = 4,
    FMOD_TAGDATATYPE_STRING_UTF16BE = 5,
    FMOD_TAGDATATYPE_STRING_UTF8 = 6,
    FMOD_TAGDATATYPE_MAX = 7,
    FMOD_TAGDATATYPE_FORCEINT = 65536,
}
pub type FMOD_DEBUG_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        flags: FMOD_DEBUG_FLAGS,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        func: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
    ) -> FMOD_RESULT,
>;
pub type FMOD_SYSTEM_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        system: *mut FMOD_SYSTEM,
        type_: FMOD_SYSTEM_CALLBACK_TYPE,
        commanddata1: *mut ::std::os::raw::c_void,
        commanddata2: *mut ::std::os::raw::c_void,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CHANNELCONTROL_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        channelcontrol: *mut FMOD_CHANNELCONTROL,
        controltype: FMOD_CHANNELCONTROL_TYPE,
        callbacktype: FMOD_CHANNELCONTROL_CALLBACK_TYPE,
        commanddata1: *mut ::std::os::raw::c_void,
        commanddata2: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_SOUND_NONBLOCK_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(sound: *mut FMOD_SOUND, result: FMOD_RESULT) -> FMOD_RESULT,
>;
pub type FMOD_SOUND_PCMREAD_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        sound: *mut FMOD_SOUND,
        data: *mut ::std::os::raw::c_void,
        datalen: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT,
>;
pub type FMOD_SOUND_PCMSETPOS_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        sound: *mut FMOD_SOUND,
        subsound: ::std::os::raw::c_int,
        position: ::std::os::raw::c_uint,
        postype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT,
>;
pub type FMOD_FILE_OPEN_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        name: *const ::std::os::raw::c_char,
        filesize: *mut ::std::os::raw::c_uint,
        handle: *mut *mut ::std::os::raw::c_void,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_FILE_CLOSE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_FILE_READ_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        buffer: *mut ::std::os::raw::c_void,
        sizebytes: ::std::os::raw::c_uint,
        bytesread: *mut ::std::os::raw::c_uint,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_FILE_SEEK_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut ::std::os::raw::c_void,
        pos: ::std::os::raw::c_uint,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_FILE_ASYNCREAD_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        info: *mut FMOD_ASYNCREADINFO,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_FILE_ASYNCCANCEL_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        info: *mut FMOD_ASYNCREADINFO,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_FILE_ASYNCDONE_FUNC =
    ::std::option::Option<unsafe extern "C" fn(info: *mut FMOD_ASYNCREADINFO, result: FMOD_RESULT)>;
pub type FMOD_MEMORY_ALLOC_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        size: ::std::os::raw::c_uint,
        type_: FMOD_MEMORY_TYPE,
        sourcestr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type FMOD_MEMORY_REALLOC_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_uint,
        type_: FMOD_MEMORY_TYPE,
        sourcestr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type FMOD_MEMORY_FREE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        type_: FMOD_MEMORY_TYPE,
        sourcestr: *const ::std::os::raw::c_char,
    ),
>;
pub type FMOD_3D_ROLLOFF_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(channelcontrol: *mut FMOD_CHANNELCONTROL, distance: f32) -> f32,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_ASYNCREADINFO {
    pub handle: *mut ::std::os::raw::c_void,
    pub offset: ::std::os::raw::c_uint,
    pub sizebytes: ::std::os::raw::c_uint,
    pub priority: ::std::os::raw::c_int,
    pub userdata: *mut ::std::os::raw::c_void,
    pub buffer: *mut ::std::os::raw::c_void,
    pub bytesread: ::std::os::raw::c_uint,
    pub done: FMOD_FILE_ASYNCDONE_FUNC,
}
#[test]
fn bindgen_test_layout_FMOD_ASYNCREADINFO() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_ASYNCREADINFO>(),
        56usize,
        concat!("Size of: ", stringify!(FMOD_ASYNCREADINFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_ASYNCREADINFO>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_ASYNCREADINFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_ASYNCREADINFO>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ASYNCREADINFO),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_ASYNCREADINFO>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ASYNCREADINFO),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_ASYNCREADINFO>())).sizebytes as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ASYNCREADINFO),
            "::",
            stringify!(sizebytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_ASYNCREADINFO>())).priority as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ASYNCREADINFO),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_ASYNCREADINFO>())).userdata as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ASYNCREADINFO),
            "::",
            stringify!(userdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_ASYNCREADINFO>())).buffer as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ASYNCREADINFO),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_ASYNCREADINFO>())).bytesread as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ASYNCREADINFO),
            "::",
            stringify!(bytesread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_ASYNCREADINFO>())).done as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ASYNCREADINFO),
            "::",
            stringify!(done)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_VECTOR {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[test]
fn bindgen_test_layout_FMOD_VECTOR() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_VECTOR>(),
        12usize,
        concat!("Size of: ", stringify!(FMOD_VECTOR))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_VECTOR>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_VECTOR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_VECTOR>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_VECTOR),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_VECTOR>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_VECTOR),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_VECTOR>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_VECTOR),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_3D_ATTRIBUTES {
    pub position: FMOD_VECTOR,
    pub velocity: FMOD_VECTOR,
    pub forward: FMOD_VECTOR,
    pub up: FMOD_VECTOR,
}
#[test]
fn bindgen_test_layout_FMOD_3D_ATTRIBUTES() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_3D_ATTRIBUTES>(),
        48usize,
        concat!("Size of: ", stringify!(FMOD_3D_ATTRIBUTES))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_3D_ATTRIBUTES>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_3D_ATTRIBUTES))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_3D_ATTRIBUTES>())).position as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_3D_ATTRIBUTES),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_3D_ATTRIBUTES>())).velocity as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_3D_ATTRIBUTES),
            "::",
            stringify!(velocity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_3D_ATTRIBUTES>())).forward as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_3D_ATTRIBUTES),
            "::",
            stringify!(forward)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_3D_ATTRIBUTES>())).up as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_3D_ATTRIBUTES),
            "::",
            stringify!(up)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_GUID {
    pub Data1: ::std::os::raw::c_uint,
    pub Data2: ::std::os::raw::c_ushort,
    pub Data3: ::std::os::raw::c_ushort,
    pub Data4: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_FMOD_GUID() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_GUID>(),
        16usize,
        concat!("Size of: ", stringify!(FMOD_GUID))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_GUID>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_GUID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_GUID>())).Data1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_GUID),
            "::",
            stringify!(Data1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_GUID>())).Data2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_GUID),
            "::",
            stringify!(Data2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_GUID>())).Data3 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_GUID),
            "::",
            stringify!(Data3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_GUID>())).Data4 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_GUID),
            "::",
            stringify!(Data4)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_PLUGINLIST {
    pub type_: FMOD_PLUGINTYPE,
    pub description: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_FMOD_PLUGINLIST() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_PLUGINLIST>(),
        16usize,
        concat!("Size of: ", stringify!(FMOD_PLUGINLIST))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_PLUGINLIST>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_PLUGINLIST))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_PLUGINLIST>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_PLUGINLIST),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_PLUGINLIST>())).description as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_PLUGINLIST),
            "::",
            stringify!(description)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_ADVANCEDSETTINGS {
    pub cbSize: ::std::os::raw::c_int,
    pub maxMPEGCodecs: ::std::os::raw::c_int,
    pub maxADPCMCodecs: ::std::os::raw::c_int,
    pub maxXMACodecs: ::std::os::raw::c_int,
    pub maxVorbisCodecs: ::std::os::raw::c_int,
    pub maxAT9Codecs: ::std::os::raw::c_int,
    pub maxFADPCMCodecs: ::std::os::raw::c_int,
    pub maxPCMCodecs: ::std::os::raw::c_int,
    pub ASIONumChannels: ::std::os::raw::c_int,
    pub ASIOChannelList: *mut *mut ::std::os::raw::c_char,
    pub ASIOSpeakerList: *mut FMOD_SPEAKER,
    pub vol0virtualvol: f32,
    pub defaultDecodeBufferSize: ::std::os::raw::c_uint,
    pub profilePort: ::std::os::raw::c_ushort,
    pub geometryMaxFadeTime: ::std::os::raw::c_uint,
    pub distanceFilterCenterFreq: f32,
    pub reverb3Dinstance: ::std::os::raw::c_int,
    pub DSPBufferPoolSize: ::std::os::raw::c_int,
    pub resamplerMethod: FMOD_DSP_RESAMPLER,
    pub randomSeed: ::std::os::raw::c_uint,
    pub maxConvolutionThreads: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FMOD_ADVANCEDSETTINGS() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_ADVANCEDSETTINGS>(),
        96usize,
        concat!("Size of: ", stringify!(FMOD_ADVANCEDSETTINGS))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_ADVANCEDSETTINGS>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_ADVANCEDSETTINGS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_ADVANCEDSETTINGS>())).cbSize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(cbSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_ADVANCEDSETTINGS>())).maxMPEGCodecs as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(maxMPEGCodecs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_ADVANCEDSETTINGS>())).maxADPCMCodecs as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(maxADPCMCodecs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_ADVANCEDSETTINGS>())).maxXMACodecs as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(maxXMACodecs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_ADVANCEDSETTINGS>())).maxVorbisCodecs as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(maxVorbisCodecs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_ADVANCEDSETTINGS>())).maxAT9Codecs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(maxAT9Codecs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_ADVANCEDSETTINGS>())).maxFADPCMCodecs as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(maxFADPCMCodecs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_ADVANCEDSETTINGS>())).maxPCMCodecs as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(maxPCMCodecs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_ADVANCEDSETTINGS>())).ASIONumChannels as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(ASIONumChannels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_ADVANCEDSETTINGS>())).ASIOChannelList as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(ASIOChannelList)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_ADVANCEDSETTINGS>())).ASIOSpeakerList as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(ASIOSpeakerList)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_ADVANCEDSETTINGS>())).vol0virtualvol as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(vol0virtualvol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_ADVANCEDSETTINGS>())).defaultDecodeBufferSize as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(defaultDecodeBufferSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_ADVANCEDSETTINGS>())).profilePort as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(profilePort)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_ADVANCEDSETTINGS>())).geometryMaxFadeTime as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(geometryMaxFadeTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_ADVANCEDSETTINGS>())).distanceFilterCenterFreq as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(distanceFilterCenterFreq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_ADVANCEDSETTINGS>())).reverb3Dinstance as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(reverb3Dinstance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_ADVANCEDSETTINGS>())).DSPBufferPoolSize as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(DSPBufferPoolSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_ADVANCEDSETTINGS>())).resamplerMethod as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(resamplerMethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_ADVANCEDSETTINGS>())).randomSeed as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(randomSeed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_ADVANCEDSETTINGS>())).maxConvolutionThreads as *const _
                as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ADVANCEDSETTINGS),
            "::",
            stringify!(maxConvolutionThreads)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_TAG {
    pub type_: FMOD_TAGTYPE,
    pub datatype: FMOD_TAGDATATYPE,
    pub name: *mut ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
    pub datalen: ::std::os::raw::c_uint,
    pub updated: FMOD_BOOL,
}
#[test]
fn bindgen_test_layout_FMOD_TAG() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_TAG>(),
        32usize,
        concat!("Size of: ", stringify!(FMOD_TAG))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_TAG>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_TAG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_TAG>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_TAG),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_TAG>())).datatype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_TAG),
            "::",
            stringify!(datatype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_TAG>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_TAG),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_TAG>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_TAG),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_TAG>())).datalen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_TAG),
            "::",
            stringify!(datalen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_TAG>())).updated as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_TAG),
            "::",
            stringify!(updated)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_CREATESOUNDEXINFO {
    pub cbsize: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_uint,
    pub fileoffset: ::std::os::raw::c_uint,
    pub numchannels: ::std::os::raw::c_int,
    pub defaultfrequency: ::std::os::raw::c_int,
    pub format: FMOD_SOUND_FORMAT,
    pub decodebuffersize: ::std::os::raw::c_uint,
    pub initialsubsound: ::std::os::raw::c_int,
    pub numsubsounds: ::std::os::raw::c_int,
    pub inclusionlist: *mut ::std::os::raw::c_int,
    pub inclusionlistnum: ::std::os::raw::c_int,
    pub pcmreadcallback: FMOD_SOUND_PCMREAD_CALLBACK,
    pub pcmsetposcallback: FMOD_SOUND_PCMSETPOS_CALLBACK,
    pub nonblockcallback: FMOD_SOUND_NONBLOCK_CALLBACK,
    pub dlsname: *const ::std::os::raw::c_char,
    pub encryptionkey: *const ::std::os::raw::c_char,
    pub maxpolyphony: ::std::os::raw::c_int,
    pub userdata: *mut ::std::os::raw::c_void,
    pub suggestedsoundtype: FMOD_SOUND_TYPE,
    pub fileuseropen: FMOD_FILE_OPEN_CALLBACK,
    pub fileuserclose: FMOD_FILE_CLOSE_CALLBACK,
    pub fileuserread: FMOD_FILE_READ_CALLBACK,
    pub fileuserseek: FMOD_FILE_SEEK_CALLBACK,
    pub fileuserasyncread: FMOD_FILE_ASYNCREAD_CALLBACK,
    pub fileuserasynccancel: FMOD_FILE_ASYNCCANCEL_CALLBACK,
    pub fileuserdata: *mut ::std::os::raw::c_void,
    pub filebuffersize: ::std::os::raw::c_int,
    pub channelorder: FMOD_CHANNELORDER,
    pub initialsoundgroup: *mut FMOD_SOUNDGROUP,
    pub initialseekposition: ::std::os::raw::c_uint,
    pub initialseekpostype: FMOD_TIMEUNIT,
    pub ignoresetfilesystem: ::std::os::raw::c_int,
    pub audioqueuepolicy: ::std::os::raw::c_uint,
    pub minmidigranularity: ::std::os::raw::c_uint,
    pub nonblockthreadid: ::std::os::raw::c_int,
    pub fsbguid: *mut FMOD_GUID,
}
#[test]
fn bindgen_test_layout_FMOD_CREATESOUNDEXINFO() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_CREATESOUNDEXINFO>(),
        224usize,
        concat!("Size of: ", stringify!(FMOD_CREATESOUNDEXINFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_CREATESOUNDEXINFO>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_CREATESOUNDEXINFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).cbsize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(cbsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).fileoffset as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(fileoffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).numchannels as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(numchannels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).defaultfrequency as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(defaultfrequency)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).format as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).decodebuffersize as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(decodebuffersize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).initialsubsound as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(initialsubsound)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).numsubsounds as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(numsubsounds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).inclusionlist as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(inclusionlist)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).inclusionlistnum as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(inclusionlistnum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).pcmreadcallback as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(pcmreadcallback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).pcmsetposcallback as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(pcmsetposcallback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).nonblockcallback as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(nonblockcallback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).dlsname as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(dlsname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).encryptionkey as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(encryptionkey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).maxpolyphony as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(maxpolyphony)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).userdata as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(userdata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).suggestedsoundtype as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(suggestedsoundtype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).fileuseropen as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(fileuseropen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).fileuserclose as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(fileuserclose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).fileuserread as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(fileuserread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).fileuserseek as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(fileuserseek)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).fileuserasyncread as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(fileuserasyncread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).fileuserasynccancel as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(fileuserasynccancel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).fileuserdata as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(fileuserdata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).filebuffersize as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(filebuffersize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).channelorder as *const _ as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(channelorder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).initialsoundgroup as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(initialsoundgroup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).initialseekposition as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(initialseekposition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).initialseekpostype as *const _
                as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(initialseekpostype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).ignoresetfilesystem as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(ignoresetfilesystem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).audioqueuepolicy as *const _ as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(audioqueuepolicy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).minmidigranularity as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(minmidigranularity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).nonblockthreadid as *const _ as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(nonblockthreadid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CREATESOUNDEXINFO>())).fsbguid as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CREATESOUNDEXINFO),
            "::",
            stringify!(fsbguid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_REVERB_PROPERTIES {
    pub DecayTime: f32,
    pub EarlyDelay: f32,
    pub LateDelay: f32,
    pub HFReference: f32,
    pub HFDecayRatio: f32,
    pub Diffusion: f32,
    pub Density: f32,
    pub LowShelfFrequency: f32,
    pub LowShelfGain: f32,
    pub HighCut: f32,
    pub EarlyLateMix: f32,
    pub WetLevel: f32,
}
#[test]
fn bindgen_test_layout_FMOD_REVERB_PROPERTIES() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_REVERB_PROPERTIES>(),
        48usize,
        concat!("Size of: ", stringify!(FMOD_REVERB_PROPERTIES))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_REVERB_PROPERTIES>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_REVERB_PROPERTIES))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_REVERB_PROPERTIES>())).DecayTime as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(DecayTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_REVERB_PROPERTIES>())).EarlyDelay as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(EarlyDelay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_REVERB_PROPERTIES>())).LateDelay as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(LateDelay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_REVERB_PROPERTIES>())).HFReference as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(HFReference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_REVERB_PROPERTIES>())).HFDecayRatio as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(HFDecayRatio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_REVERB_PROPERTIES>())).Diffusion as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(Diffusion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_REVERB_PROPERTIES>())).Density as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(Density)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_REVERB_PROPERTIES>())).LowShelfFrequency as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(LowShelfFrequency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_REVERB_PROPERTIES>())).LowShelfGain as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(LowShelfGain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_REVERB_PROPERTIES>())).HighCut as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(HighCut)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_REVERB_PROPERTIES>())).EarlyLateMix as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(EarlyLateMix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_REVERB_PROPERTIES>())).WetLevel as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_REVERB_PROPERTIES),
            "::",
            stringify!(WetLevel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_ERRORCALLBACK_INFO {
    pub result: FMOD_RESULT,
    pub instancetype: FMOD_ERRORCALLBACK_INSTANCETYPE,
    pub instance: *mut ::std::os::raw::c_void,
    pub functionname: *const ::std::os::raw::c_char,
    pub functionparams: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_FMOD_ERRORCALLBACK_INFO() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_ERRORCALLBACK_INFO>(),
        32usize,
        concat!("Size of: ", stringify!(FMOD_ERRORCALLBACK_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_ERRORCALLBACK_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_ERRORCALLBACK_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_ERRORCALLBACK_INFO>())).result as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ERRORCALLBACK_INFO),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_ERRORCALLBACK_INFO>())).instancetype as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ERRORCALLBACK_INFO),
            "::",
            stringify!(instancetype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_ERRORCALLBACK_INFO>())).instance as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ERRORCALLBACK_INFO),
            "::",
            stringify!(instance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_ERRORCALLBACK_INFO>())).functionname as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ERRORCALLBACK_INFO),
            "::",
            stringify!(functionname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_ERRORCALLBACK_INFO>())).functionparams as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_ERRORCALLBACK_INFO),
            "::",
            stringify!(functionparams)
        )
    );
}
pub type FMOD_CODEC_OPEN_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        usermode: FMOD_MODE,
        userexinfo: *mut FMOD_CREATESOUNDEXINFO,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CODEC_CLOSE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(codec_state: *mut FMOD_CODEC_STATE) -> FMOD_RESULT>;
pub type FMOD_CODEC_READ_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        buffer: *mut ::std::os::raw::c_void,
        samples_in: ::std::os::raw::c_uint,
        samples_out: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CODEC_GETLENGTH_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        length: *mut ::std::os::raw::c_uint,
        lengthtype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CODEC_SETPOSITION_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        subsound: ::std::os::raw::c_int,
        position: ::std::os::raw::c_uint,
        postype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CODEC_GETPOSITION_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        position: *mut ::std::os::raw::c_uint,
        postype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CODEC_SOUNDCREATE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        subsound: ::std::os::raw::c_int,
        sound: *mut FMOD_SOUND,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CODEC_METADATA_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        tagtype: FMOD_TAGTYPE,
        name: *mut ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
        datalen: ::std::os::raw::c_uint,
        datatype: FMOD_TAGDATATYPE,
        unique: ::std::os::raw::c_int,
    ) -> FMOD_RESULT,
>;
pub type FMOD_CODEC_GETWAVEFORMAT_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        codec_state: *mut FMOD_CODEC_STATE,
        index: ::std::os::raw::c_int,
        waveformat: *mut FMOD_CODEC_WAVEFORMAT,
    ) -> FMOD_RESULT,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_CODEC_DESCRIPTION {
    pub name: *const ::std::os::raw::c_char,
    pub version: ::std::os::raw::c_uint,
    pub defaultasstream: ::std::os::raw::c_int,
    pub timeunits: FMOD_TIMEUNIT,
    pub open: FMOD_CODEC_OPEN_CALLBACK,
    pub close: FMOD_CODEC_CLOSE_CALLBACK,
    pub read: FMOD_CODEC_READ_CALLBACK,
    pub getlength: FMOD_CODEC_GETLENGTH_CALLBACK,
    pub setposition: FMOD_CODEC_SETPOSITION_CALLBACK,
    pub getposition: FMOD_CODEC_GETPOSITION_CALLBACK,
    pub soundcreate: FMOD_CODEC_SOUNDCREATE_CALLBACK,
    pub getwaveformat: FMOD_CODEC_GETWAVEFORMAT_CALLBACK,
}
#[test]
fn bindgen_test_layout_FMOD_CODEC_DESCRIPTION() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_CODEC_DESCRIPTION>(),
        88usize,
        concat!("Size of: ", stringify!(FMOD_CODEC_DESCRIPTION))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_CODEC_DESCRIPTION>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_CODEC_DESCRIPTION))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CODEC_DESCRIPTION>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CODEC_DESCRIPTION>())).version as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CODEC_DESCRIPTION>())).defaultasstream as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(defaultasstream)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CODEC_DESCRIPTION>())).timeunits as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(timeunits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CODEC_DESCRIPTION>())).open as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CODEC_DESCRIPTION>())).close as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CODEC_DESCRIPTION>())).read as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CODEC_DESCRIPTION>())).getlength as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(getlength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CODEC_DESCRIPTION>())).setposition as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(setposition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CODEC_DESCRIPTION>())).getposition as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(getposition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CODEC_DESCRIPTION>())).soundcreate as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(soundcreate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CODEC_DESCRIPTION>())).getwaveformat as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_DESCRIPTION),
            "::",
            stringify!(getwaveformat)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_CODEC_WAVEFORMAT {
    pub name: *const ::std::os::raw::c_char,
    pub format: FMOD_SOUND_FORMAT,
    pub channels: ::std::os::raw::c_int,
    pub frequency: ::std::os::raw::c_int,
    pub lengthbytes: ::std::os::raw::c_uint,
    pub lengthpcm: ::std::os::raw::c_uint,
    pub pcmblocksize: ::std::os::raw::c_uint,
    pub loopstart: ::std::os::raw::c_int,
    pub loopend: ::std::os::raw::c_int,
    pub mode: FMOD_MODE,
    pub channelmask: FMOD_CHANNELMASK,
    pub channelorder: FMOD_CHANNELORDER,
    pub peakvolume: f32,
}
#[test]
fn bindgen_test_layout_FMOD_CODEC_WAVEFORMAT() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_CODEC_WAVEFORMAT>(),
        56usize,
        concat!("Size of: ", stringify!(FMOD_CODEC_WAVEFORMAT))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_CODEC_WAVEFORMAT>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_CODEC_WAVEFORMAT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CODEC_WAVEFORMAT>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CODEC_WAVEFORMAT>())).format as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CODEC_WAVEFORMAT>())).channels as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CODEC_WAVEFORMAT>())).frequency as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(frequency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CODEC_WAVEFORMAT>())).lengthbytes as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(lengthbytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CODEC_WAVEFORMAT>())).lengthpcm as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(lengthpcm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CODEC_WAVEFORMAT>())).pcmblocksize as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(pcmblocksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CODEC_WAVEFORMAT>())).loopstart as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(loopstart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CODEC_WAVEFORMAT>())).loopend as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(loopend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CODEC_WAVEFORMAT>())).mode as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CODEC_WAVEFORMAT>())).channelmask as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(channelmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CODEC_WAVEFORMAT>())).channelorder as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(channelorder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CODEC_WAVEFORMAT>())).peakvolume as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_WAVEFORMAT),
            "::",
            stringify!(peakvolume)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_CODEC_STATE {
    pub numsubsounds: ::std::os::raw::c_int,
    pub waveformat: *mut FMOD_CODEC_WAVEFORMAT,
    pub plugindata: *mut ::std::os::raw::c_void,
    pub filehandle: *mut ::std::os::raw::c_void,
    pub filesize: ::std::os::raw::c_uint,
    pub fileread: FMOD_FILE_READ_CALLBACK,
    pub fileseek: FMOD_FILE_SEEK_CALLBACK,
    pub metadata: FMOD_CODEC_METADATA_CALLBACK,
    pub waveformatversion: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FMOD_CODEC_STATE() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_CODEC_STATE>(),
        72usize,
        concat!("Size of: ", stringify!(FMOD_CODEC_STATE))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_CODEC_STATE>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_CODEC_STATE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CODEC_STATE>())).numsubsounds as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE),
            "::",
            stringify!(numsubsounds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CODEC_STATE>())).waveformat as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE),
            "::",
            stringify!(waveformat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CODEC_STATE>())).plugindata as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE),
            "::",
            stringify!(plugindata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CODEC_STATE>())).filehandle as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE),
            "::",
            stringify!(filehandle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CODEC_STATE>())).filesize as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE),
            "::",
            stringify!(filesize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CODEC_STATE>())).fileread as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE),
            "::",
            stringify!(fileread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CODEC_STATE>())).fileseek as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE),
            "::",
            stringify!(fileseek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_CODEC_STATE>())).metadata as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE),
            "::",
            stringify!(metadata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_CODEC_STATE>())).waveformatversion as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_CODEC_STATE),
            "::",
            stringify!(waveformatversion)
        )
    );
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_TYPE {
    FMOD_DSP_TYPE_UNKNOWN = 0,
    FMOD_DSP_TYPE_MIXER = 1,
    FMOD_DSP_TYPE_OSCILLATOR = 2,
    FMOD_DSP_TYPE_LOWPASS = 3,
    FMOD_DSP_TYPE_ITLOWPASS = 4,
    FMOD_DSP_TYPE_HIGHPASS = 5,
    FMOD_DSP_TYPE_ECHO = 6,
    FMOD_DSP_TYPE_FADER = 7,
    FMOD_DSP_TYPE_FLANGE = 8,
    FMOD_DSP_TYPE_DISTORTION = 9,
    FMOD_DSP_TYPE_NORMALIZE = 10,
    FMOD_DSP_TYPE_LIMITER = 11,
    FMOD_DSP_TYPE_PARAMEQ = 12,
    FMOD_DSP_TYPE_PITCHSHIFT = 13,
    FMOD_DSP_TYPE_CHORUS = 14,
    FMOD_DSP_TYPE_VSTPLUGIN = 15,
    FMOD_DSP_TYPE_WINAMPPLUGIN = 16,
    FMOD_DSP_TYPE_ITECHO = 17,
    FMOD_DSP_TYPE_COMPRESSOR = 18,
    FMOD_DSP_TYPE_SFXREVERB = 19,
    FMOD_DSP_TYPE_LOWPASS_SIMPLE = 20,
    FMOD_DSP_TYPE_DELAY = 21,
    FMOD_DSP_TYPE_TREMOLO = 22,
    FMOD_DSP_TYPE_LADSPAPLUGIN = 23,
    FMOD_DSP_TYPE_SEND = 24,
    FMOD_DSP_TYPE_RETURN = 25,
    FMOD_DSP_TYPE_HIGHPASS_SIMPLE = 26,
    FMOD_DSP_TYPE_PAN = 27,
    FMOD_DSP_TYPE_THREE_EQ = 28,
    FMOD_DSP_TYPE_FFT = 29,
    FMOD_DSP_TYPE_LOUDNESS_METER = 30,
    FMOD_DSP_TYPE_ENVELOPEFOLLOWER = 31,
    FMOD_DSP_TYPE_CONVOLUTIONREVERB = 32,
    FMOD_DSP_TYPE_CHANNELMIX = 33,
    FMOD_DSP_TYPE_TRANSCEIVER = 34,
    FMOD_DSP_TYPE_OBJECTPAN = 35,
    FMOD_DSP_TYPE_MULTIBAND_EQ = 36,
    FMOD_DSP_TYPE_MAX = 37,
    FMOD_DSP_TYPE_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_OSCILLATOR {
    FMOD_DSP_OSCILLATOR_TYPE = 0,
    FMOD_DSP_OSCILLATOR_RATE = 1,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_LOWPASS {
    FMOD_DSP_LOWPASS_CUTOFF = 0,
    FMOD_DSP_LOWPASS_RESONANCE = 1,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_ITLOWPASS {
    FMOD_DSP_ITLOWPASS_CUTOFF = 0,
    FMOD_DSP_ITLOWPASS_RESONANCE = 1,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_HIGHPASS {
    FMOD_DSP_HIGHPASS_CUTOFF = 0,
    FMOD_DSP_HIGHPASS_RESONANCE = 1,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_ECHO {
    FMOD_DSP_ECHO_DELAY = 0,
    FMOD_DSP_ECHO_FEEDBACK = 1,
    FMOD_DSP_ECHO_DRYLEVEL = 2,
    FMOD_DSP_ECHO_WETLEVEL = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_FADER {
    FMOD_DSP_FADER_GAIN = 0,
    FMOD_DSP_FADER_OVERALL_GAIN = 1,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_FLANGE {
    FMOD_DSP_FLANGE_MIX = 0,
    FMOD_DSP_FLANGE_DEPTH = 1,
    FMOD_DSP_FLANGE_RATE = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_DISTORTION {
    FMOD_DSP_DISTORTION_LEVEL = 0,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_NORMALIZE {
    FMOD_DSP_NORMALIZE_FADETIME = 0,
    FMOD_DSP_NORMALIZE_THRESHHOLD = 1,
    FMOD_DSP_NORMALIZE_MAXAMP = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_LIMITER {
    FMOD_DSP_LIMITER_RELEASETIME = 0,
    FMOD_DSP_LIMITER_CEILING = 1,
    FMOD_DSP_LIMITER_MAXIMIZERGAIN = 2,
    FMOD_DSP_LIMITER_MODE = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_PARAMEQ {
    FMOD_DSP_PARAMEQ_CENTER = 0,
    FMOD_DSP_PARAMEQ_BANDWIDTH = 1,
    FMOD_DSP_PARAMEQ_GAIN = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_MULTIBAND_EQ {
    FMOD_DSP_MULTIBAND_EQ_A_FILTER = 0,
    FMOD_DSP_MULTIBAND_EQ_A_FREQUENCY = 1,
    FMOD_DSP_MULTIBAND_EQ_A_Q = 2,
    FMOD_DSP_MULTIBAND_EQ_A_GAIN = 3,
    FMOD_DSP_MULTIBAND_EQ_B_FILTER = 4,
    FMOD_DSP_MULTIBAND_EQ_B_FREQUENCY = 5,
    FMOD_DSP_MULTIBAND_EQ_B_Q = 6,
    FMOD_DSP_MULTIBAND_EQ_B_GAIN = 7,
    FMOD_DSP_MULTIBAND_EQ_C_FILTER = 8,
    FMOD_DSP_MULTIBAND_EQ_C_FREQUENCY = 9,
    FMOD_DSP_MULTIBAND_EQ_C_Q = 10,
    FMOD_DSP_MULTIBAND_EQ_C_GAIN = 11,
    FMOD_DSP_MULTIBAND_EQ_D_FILTER = 12,
    FMOD_DSP_MULTIBAND_EQ_D_FREQUENCY = 13,
    FMOD_DSP_MULTIBAND_EQ_D_Q = 14,
    FMOD_DSP_MULTIBAND_EQ_D_GAIN = 15,
    FMOD_DSP_MULTIBAND_EQ_E_FILTER = 16,
    FMOD_DSP_MULTIBAND_EQ_E_FREQUENCY = 17,
    FMOD_DSP_MULTIBAND_EQ_E_Q = 18,
    FMOD_DSP_MULTIBAND_EQ_E_GAIN = 19,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_MULTIBAND_EQ_FILTER_TYPE {
    FMOD_DSP_MULTIBAND_EQ_FILTER_DISABLED = 0,
    FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_12DB = 1,
    FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_24DB = 2,
    FMOD_DSP_MULTIBAND_EQ_FILTER_LOWPASS_48DB = 3,
    FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_12DB = 4,
    FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_24DB = 5,
    FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHPASS_48DB = 6,
    FMOD_DSP_MULTIBAND_EQ_FILTER_LOWSHELF = 7,
    FMOD_DSP_MULTIBAND_EQ_FILTER_HIGHSHELF = 8,
    FMOD_DSP_MULTIBAND_EQ_FILTER_PEAKING = 9,
    FMOD_DSP_MULTIBAND_EQ_FILTER_BANDPASS = 10,
    FMOD_DSP_MULTIBAND_EQ_FILTER_NOTCH = 11,
    FMOD_DSP_MULTIBAND_EQ_FILTER_ALLPASS = 12,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_PITCHSHIFT {
    FMOD_DSP_PITCHSHIFT_PITCH = 0,
    FMOD_DSP_PITCHSHIFT_FFTSIZE = 1,
    FMOD_DSP_PITCHSHIFT_OVERLAP = 2,
    FMOD_DSP_PITCHSHIFT_MAXCHANNELS = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_CHORUS {
    FMOD_DSP_CHORUS_MIX = 0,
    FMOD_DSP_CHORUS_RATE = 1,
    FMOD_DSP_CHORUS_DEPTH = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_ITECHO {
    FMOD_DSP_ITECHO_WETDRYMIX = 0,
    FMOD_DSP_ITECHO_FEEDBACK = 1,
    FMOD_DSP_ITECHO_LEFTDELAY = 2,
    FMOD_DSP_ITECHO_RIGHTDELAY = 3,
    FMOD_DSP_ITECHO_PANDELAY = 4,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_COMPRESSOR {
    FMOD_DSP_COMPRESSOR_THRESHOLD = 0,
    FMOD_DSP_COMPRESSOR_RATIO = 1,
    FMOD_DSP_COMPRESSOR_ATTACK = 2,
    FMOD_DSP_COMPRESSOR_RELEASE = 3,
    FMOD_DSP_COMPRESSOR_GAINMAKEUP = 4,
    FMOD_DSP_COMPRESSOR_USESIDECHAIN = 5,
    FMOD_DSP_COMPRESSOR_LINKED = 6,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_SFXREVERB {
    FMOD_DSP_SFXREVERB_DECAYTIME = 0,
    FMOD_DSP_SFXREVERB_EARLYDELAY = 1,
    FMOD_DSP_SFXREVERB_LATEDELAY = 2,
    FMOD_DSP_SFXREVERB_HFREFERENCE = 3,
    FMOD_DSP_SFXREVERB_HFDECAYRATIO = 4,
    FMOD_DSP_SFXREVERB_DIFFUSION = 5,
    FMOD_DSP_SFXREVERB_DENSITY = 6,
    FMOD_DSP_SFXREVERB_LOWSHELFFREQUENCY = 7,
    FMOD_DSP_SFXREVERB_LOWSHELFGAIN = 8,
    FMOD_DSP_SFXREVERB_HIGHCUT = 9,
    FMOD_DSP_SFXREVERB_EARLYLATEMIX = 10,
    FMOD_DSP_SFXREVERB_WETLEVEL = 11,
    FMOD_DSP_SFXREVERB_DRYLEVEL = 12,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_LOWPASS_SIMPLE {
    FMOD_DSP_LOWPASS_SIMPLE_CUTOFF = 0,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_DELAY {
    FMOD_DSP_DELAY_CH0 = 0,
    FMOD_DSP_DELAY_CH1 = 1,
    FMOD_DSP_DELAY_CH2 = 2,
    FMOD_DSP_DELAY_CH3 = 3,
    FMOD_DSP_DELAY_CH4 = 4,
    FMOD_DSP_DELAY_CH5 = 5,
    FMOD_DSP_DELAY_CH6 = 6,
    FMOD_DSP_DELAY_CH7 = 7,
    FMOD_DSP_DELAY_CH8 = 8,
    FMOD_DSP_DELAY_CH9 = 9,
    FMOD_DSP_DELAY_CH10 = 10,
    FMOD_DSP_DELAY_CH11 = 11,
    FMOD_DSP_DELAY_CH12 = 12,
    FMOD_DSP_DELAY_CH13 = 13,
    FMOD_DSP_DELAY_CH14 = 14,
    FMOD_DSP_DELAY_CH15 = 15,
    FMOD_DSP_DELAY_MAXDELAY = 16,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_TREMOLO {
    FMOD_DSP_TREMOLO_FREQUENCY = 0,
    FMOD_DSP_TREMOLO_DEPTH = 1,
    FMOD_DSP_TREMOLO_SHAPE = 2,
    FMOD_DSP_TREMOLO_SKEW = 3,
    FMOD_DSP_TREMOLO_DUTY = 4,
    FMOD_DSP_TREMOLO_SQUARE = 5,
    FMOD_DSP_TREMOLO_PHASE = 6,
    FMOD_DSP_TREMOLO_SPREAD = 7,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_SEND {
    FMOD_DSP_SEND_RETURNID = 0,
    FMOD_DSP_SEND_LEVEL = 1,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_RETURN {
    FMOD_DSP_RETURN_ID = 0,
    FMOD_DSP_RETURN_INPUT_SPEAKER_MODE = 1,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_HIGHPASS_SIMPLE {
    FMOD_DSP_HIGHPASS_SIMPLE_CUTOFF = 0,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_PAN_2D_STEREO_MODE_TYPE {
    FMOD_DSP_PAN_2D_STEREO_MODE_DISTRIBUTED = 0,
    FMOD_DSP_PAN_2D_STEREO_MODE_DISCRETE = 1,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_PAN_MODE_TYPE {
    FMOD_DSP_PAN_MODE_MONO = 0,
    FMOD_DSP_PAN_MODE_STEREO = 1,
    FMOD_DSP_PAN_MODE_SURROUND = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_PAN_3D_ROLLOFF_TYPE {
    FMOD_DSP_PAN_3D_ROLLOFF_LINEARSQUARED = 0,
    FMOD_DSP_PAN_3D_ROLLOFF_LINEAR = 1,
    FMOD_DSP_PAN_3D_ROLLOFF_INVERSE = 2,
    FMOD_DSP_PAN_3D_ROLLOFF_INVERSETAPERED = 3,
    FMOD_DSP_PAN_3D_ROLLOFF_CUSTOM = 4,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_PAN_3D_EXTENT_MODE_TYPE {
    FMOD_DSP_PAN_3D_EXTENT_MODE_AUTO = 0,
    FMOD_DSP_PAN_3D_EXTENT_MODE_USER = 1,
    FMOD_DSP_PAN_3D_EXTENT_MODE_OFF = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_PAN {
    FMOD_DSP_PAN_MODE = 0,
    FMOD_DSP_PAN_2D_STEREO_POSITION = 1,
    FMOD_DSP_PAN_2D_DIRECTION = 2,
    FMOD_DSP_PAN_2D_EXTENT = 3,
    FMOD_DSP_PAN_2D_ROTATION = 4,
    FMOD_DSP_PAN_2D_LFE_LEVEL = 5,
    FMOD_DSP_PAN_2D_STEREO_MODE = 6,
    FMOD_DSP_PAN_2D_STEREO_SEPARATION = 7,
    FMOD_DSP_PAN_2D_STEREO_AXIS = 8,
    FMOD_DSP_PAN_ENABLED_SPEAKERS = 9,
    FMOD_DSP_PAN_3D_POSITION = 10,
    FMOD_DSP_PAN_3D_ROLLOFF = 11,
    FMOD_DSP_PAN_3D_MIN_DISTANCE = 12,
    FMOD_DSP_PAN_3D_MAX_DISTANCE = 13,
    FMOD_DSP_PAN_3D_EXTENT_MODE = 14,
    FMOD_DSP_PAN_3D_SOUND_SIZE = 15,
    FMOD_DSP_PAN_3D_MIN_EXTENT = 16,
    FMOD_DSP_PAN_3D_PAN_BLEND = 17,
    FMOD_DSP_PAN_LFE_UPMIX_ENABLED = 18,
    FMOD_DSP_PAN_OVERALL_GAIN = 19,
    FMOD_DSP_PAN_SURROUND_SPEAKER_MODE = 20,
    FMOD_DSP_PAN_2D_HEIGHT_BLEND = 21,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_TYPE {
    FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_12DB = 0,
    FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_24DB = 1,
    FMOD_DSP_THREE_EQ_CROSSOVERSLOPE_48DB = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_THREE_EQ {
    FMOD_DSP_THREE_EQ_LOWGAIN = 0,
    FMOD_DSP_THREE_EQ_MIDGAIN = 1,
    FMOD_DSP_THREE_EQ_HIGHGAIN = 2,
    FMOD_DSP_THREE_EQ_LOWCROSSOVER = 3,
    FMOD_DSP_THREE_EQ_HIGHCROSSOVER = 4,
    FMOD_DSP_THREE_EQ_CROSSOVERSLOPE = 5,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_FFT_WINDOW {
    FMOD_DSP_FFT_WINDOW_RECT = 0,
    FMOD_DSP_FFT_WINDOW_TRIANGLE = 1,
    FMOD_DSP_FFT_WINDOW_HAMMING = 2,
    FMOD_DSP_FFT_WINDOW_HANNING = 3,
    FMOD_DSP_FFT_WINDOW_BLACKMAN = 4,
    FMOD_DSP_FFT_WINDOW_BLACKMANHARRIS = 5,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_FFT {
    FMOD_DSP_FFT_WINDOWSIZE = 0,
    FMOD_DSP_FFT_WINDOWTYPE = 1,
    FMOD_DSP_FFT_SPECTRUMDATA = 2,
    FMOD_DSP_FFT_DOMINANT_FREQ = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_ENVELOPEFOLLOWER {
    FMOD_DSP_ENVELOPEFOLLOWER_ATTACK = 0,
    FMOD_DSP_ENVELOPEFOLLOWER_RELEASE = 1,
    FMOD_DSP_ENVELOPEFOLLOWER_ENVELOPE = 2,
    FMOD_DSP_ENVELOPEFOLLOWER_USESIDECHAIN = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_CONVOLUTION_REVERB {
    FMOD_DSP_CONVOLUTION_REVERB_PARAM_IR = 0,
    FMOD_DSP_CONVOLUTION_REVERB_PARAM_WET = 1,
    FMOD_DSP_CONVOLUTION_REVERB_PARAM_DRY = 2,
    FMOD_DSP_CONVOLUTION_REVERB_PARAM_LINKED = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_CHANNELMIX_OUTPUT {
    FMOD_DSP_CHANNELMIX_OUTPUT_DEFAULT = 0,
    FMOD_DSP_CHANNELMIX_OUTPUT_ALLMONO = 1,
    FMOD_DSP_CHANNELMIX_OUTPUT_ALLSTEREO = 2,
    FMOD_DSP_CHANNELMIX_OUTPUT_ALLQUAD = 3,
    FMOD_DSP_CHANNELMIX_OUTPUT_ALL5POINT1 = 4,
    FMOD_DSP_CHANNELMIX_OUTPUT_ALL7POINT1 = 5,
    FMOD_DSP_CHANNELMIX_OUTPUT_ALLLFE = 6,
    FMOD_DSP_CHANNELMIX_OUTPUT_ALL7POINT1POINT4 = 7,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_CHANNELMIX {
    FMOD_DSP_CHANNELMIX_OUTPUTGROUPING = 0,
    FMOD_DSP_CHANNELMIX_GAIN_CH0 = 1,
    FMOD_DSP_CHANNELMIX_GAIN_CH1 = 2,
    FMOD_DSP_CHANNELMIX_GAIN_CH2 = 3,
    FMOD_DSP_CHANNELMIX_GAIN_CH3 = 4,
    FMOD_DSP_CHANNELMIX_GAIN_CH4 = 5,
    FMOD_DSP_CHANNELMIX_GAIN_CH5 = 6,
    FMOD_DSP_CHANNELMIX_GAIN_CH6 = 7,
    FMOD_DSP_CHANNELMIX_GAIN_CH7 = 8,
    FMOD_DSP_CHANNELMIX_GAIN_CH8 = 9,
    FMOD_DSP_CHANNELMIX_GAIN_CH9 = 10,
    FMOD_DSP_CHANNELMIX_GAIN_CH10 = 11,
    FMOD_DSP_CHANNELMIX_GAIN_CH11 = 12,
    FMOD_DSP_CHANNELMIX_GAIN_CH12 = 13,
    FMOD_DSP_CHANNELMIX_GAIN_CH13 = 14,
    FMOD_DSP_CHANNELMIX_GAIN_CH14 = 15,
    FMOD_DSP_CHANNELMIX_GAIN_CH15 = 16,
    FMOD_DSP_CHANNELMIX_GAIN_CH16 = 17,
    FMOD_DSP_CHANNELMIX_GAIN_CH17 = 18,
    FMOD_DSP_CHANNELMIX_GAIN_CH18 = 19,
    FMOD_DSP_CHANNELMIX_GAIN_CH19 = 20,
    FMOD_DSP_CHANNELMIX_GAIN_CH20 = 21,
    FMOD_DSP_CHANNELMIX_GAIN_CH21 = 22,
    FMOD_DSP_CHANNELMIX_GAIN_CH22 = 23,
    FMOD_DSP_CHANNELMIX_GAIN_CH23 = 24,
    FMOD_DSP_CHANNELMIX_GAIN_CH24 = 25,
    FMOD_DSP_CHANNELMIX_GAIN_CH25 = 26,
    FMOD_DSP_CHANNELMIX_GAIN_CH26 = 27,
    FMOD_DSP_CHANNELMIX_GAIN_CH27 = 28,
    FMOD_DSP_CHANNELMIX_GAIN_CH28 = 29,
    FMOD_DSP_CHANNELMIX_GAIN_CH29 = 30,
    FMOD_DSP_CHANNELMIX_GAIN_CH30 = 31,
    FMOD_DSP_CHANNELMIX_GAIN_CH31 = 32,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH0 = 33,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH1 = 34,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH2 = 35,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH3 = 36,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH4 = 37,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH5 = 38,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH6 = 39,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH7 = 40,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH8 = 41,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH9 = 42,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH10 = 43,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH11 = 44,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH12 = 45,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH13 = 46,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH14 = 47,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH15 = 48,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH16 = 49,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH17 = 50,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH18 = 51,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH19 = 52,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH20 = 53,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH21 = 54,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH22 = 55,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH23 = 56,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH24 = 57,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH25 = 58,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH26 = 59,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH27 = 60,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH28 = 61,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH29 = 62,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH30 = 63,
    FMOD_DSP_CHANNELMIX_OUTPUT_CH31 = 64,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_TRANSCEIVER_SPEAKERMODE {
    FMOD_DSP_TRANSCEIVER_SPEAKERMODE_AUTO = -1,
    FMOD_DSP_TRANSCEIVER_SPEAKERMODE_MONO = 0,
    FMOD_DSP_TRANSCEIVER_SPEAKERMODE_STEREO = 1,
    FMOD_DSP_TRANSCEIVER_SPEAKERMODE_SURROUND = 2,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_TRANSCEIVER {
    FMOD_DSP_TRANSCEIVER_TRANSMIT = 0,
    FMOD_DSP_TRANSCEIVER_GAIN = 1,
    FMOD_DSP_TRANSCEIVER_CHANNEL = 2,
    FMOD_DSP_TRANSCEIVER_TRANSMITSPEAKERMODE = 3,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_OBJECTPAN {
    FMOD_DSP_OBJECTPAN_3D_POSITION = 0,
    FMOD_DSP_OBJECTPAN_3D_ROLLOFF = 1,
    FMOD_DSP_OBJECTPAN_3D_MIN_DISTANCE = 2,
    FMOD_DSP_OBJECTPAN_3D_MAX_DISTANCE = 3,
    FMOD_DSP_OBJECTPAN_3D_EXTENT_MODE = 4,
    FMOD_DSP_OBJECTPAN_3D_SOUND_SIZE = 5,
    FMOD_DSP_OBJECTPAN_3D_MIN_EXTENT = 6,
    FMOD_DSP_OBJECTPAN_OVERALL_GAIN = 7,
    FMOD_DSP_OBJECTPAN_OUTPUTGAIN = 8,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_PROCESS_OPERATION {
    FMOD_DSP_PROCESS_PERFORM = 0,
    FMOD_DSP_PROCESS_QUERY = 1,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_PAN_SURROUND_FLAGS {
    FMOD_DSP_PAN_SURROUND_DEFAULT = 0,
    FMOD_DSP_PAN_SURROUND_ROTATION_NOT_BIASED = 1,
    FMOD_DSP_PAN_SURROUND_FLAGS_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_PARAMETER_TYPE {
    FMOD_DSP_PARAMETER_TYPE_FLOAT = 0,
    FMOD_DSP_PARAMETER_TYPE_INT = 1,
    FMOD_DSP_PARAMETER_TYPE_BOOL = 2,
    FMOD_DSP_PARAMETER_TYPE_DATA = 3,
    FMOD_DSP_PARAMETER_TYPE_MAX = 4,
    FMOD_DSP_PARAMETER_TYPE_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE {
    FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_LINEAR = 0,
    FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_AUTO = 1,
    FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_PIECEWISE_LINEAR = 2,
    FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_DSP_PARAMETER_DATA_TYPE {
    FMOD_DSP_PARAMETER_DATA_TYPE_USER = 0,
    FMOD_DSP_PARAMETER_DATA_TYPE_OVERALLGAIN = -1,
    FMOD_DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES = -2,
    FMOD_DSP_PARAMETER_DATA_TYPE_SIDECHAIN = -3,
    FMOD_DSP_PARAMETER_DATA_TYPE_FFT = -4,
    FMOD_DSP_PARAMETER_DATA_TYPE_3DATTRIBUTES_MULTI = -5,
}
pub type FMOD_DSP_CREATE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE) -> FMOD_RESULT>;
pub type FMOD_DSP_RELEASE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE) -> FMOD_RESULT>;
pub type FMOD_DSP_RESET_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE) -> FMOD_RESULT>;
pub type FMOD_DSP_READ_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        inbuffer: *mut f32,
        outbuffer: *mut f32,
        length: ::std::os::raw::c_uint,
        inchannels: ::std::os::raw::c_int,
        outchannels: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_PROCESS_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        length: ::std::os::raw::c_uint,
        inbufferarray: *const FMOD_DSP_BUFFER_ARRAY,
        outbufferarray: *mut FMOD_DSP_BUFFER_ARRAY,
        inputsidle: FMOD_BOOL,
        op: FMOD_DSP_PROCESS_OPERATION,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_SETPOSITION_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        pos: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_SHOULDIPROCESS_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        inputsidle: FMOD_BOOL,
        length: ::std::os::raw::c_uint,
        inmask: FMOD_CHANNELMASK,
        inchannels: ::std::os::raw::c_int,
        speakermode: FMOD_SPEAKERMODE,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_SETPARAM_FLOAT_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        index: ::std::os::raw::c_int,
        value: f32,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_SETPARAM_INT_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_SETPARAM_BOOL_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        index: ::std::os::raw::c_int,
        value: FMOD_BOOL,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_SETPARAM_DATA_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        index: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        length: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_GETPARAM_FLOAT_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        index: ::std::os::raw::c_int,
        value: *mut f32,
        valuestr: *mut ::std::os::raw::c_char,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_GETPARAM_INT_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        index: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_int,
        valuestr: *mut ::std::os::raw::c_char,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_GETPARAM_BOOL_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        index: ::std::os::raw::c_int,
        value: *mut FMOD_BOOL,
        valuestr: *mut ::std::os::raw::c_char,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_GETPARAM_DATA_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        index: ::std::os::raw::c_int,
        data: *mut *mut ::std::os::raw::c_void,
        length: *mut ::std::os::raw::c_uint,
        valuestr: *mut ::std::os::raw::c_char,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_SYSTEM_REGISTER_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE) -> FMOD_RESULT>;
pub type FMOD_DSP_SYSTEM_DEREGISTER_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(dsp_state: *mut FMOD_DSP_STATE) -> FMOD_RESULT>;
pub type FMOD_DSP_SYSTEM_MIX_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        stage: ::std::os::raw::c_int,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_ALLOC_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        size: ::std::os::raw::c_uint,
        type_: FMOD_MEMORY_TYPE,
        sourcestr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type FMOD_DSP_REALLOC_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_uint,
        type_: FMOD_MEMORY_TYPE,
        sourcestr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type FMOD_DSP_FREE_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        type_: FMOD_MEMORY_TYPE,
        sourcestr: *const ::std::os::raw::c_char,
    ),
>;
pub type FMOD_DSP_LOG_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        level: FMOD_DEBUG_FLAGS,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        function: *const ::std::os::raw::c_char,
        string: *const ::std::os::raw::c_char,
        ...
    ),
>;
pub type FMOD_DSP_GETSAMPLERATE_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        rate: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_GETBLOCKSIZE_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        blocksize: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_GETSPEAKERMODE_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        speakermode_mixer: *mut FMOD_SPEAKERMODE,
        speakermode_output: *mut FMOD_SPEAKERMODE,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_GETCLOCK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        clock: *mut ::std::os::raw::c_ulonglong,
        offset: *mut ::std::os::raw::c_uint,
        length: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_GETLISTENERATTRIBUTES_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        numlisteners: *mut ::std::os::raw::c_int,
        attributes: *mut FMOD_3D_ATTRIBUTES,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_GETUSERDATA_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_DFT_FFTREAL_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        size: ::std::os::raw::c_int,
        signal: *const f32,
        dft: *mut FMOD_COMPLEX,
        window: *const f32,
        signalhop: ::std::os::raw::c_int,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_DFT_IFFTREAL_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        size: ::std::os::raw::c_int,
        dft: *const FMOD_COMPLEX,
        signal: *mut f32,
        window: *const f32,
        signalhop: ::std::os::raw::c_int,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_PAN_SUMMONOMATRIX_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        sourceSpeakerMode: FMOD_SPEAKERMODE,
        lowFrequencyGain: f32,
        overallGain: f32,
        matrix: *mut f32,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_PAN_SUMSTEREOMATRIX_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        sourceSpeakerMode: FMOD_SPEAKERMODE,
        pan: f32,
        lowFrequencyGain: f32,
        overallGain: f32,
        matrixHop: ::std::os::raw::c_int,
        matrix: *mut f32,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_PAN_SUMSURROUNDMATRIX_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        sourceSpeakerMode: FMOD_SPEAKERMODE,
        targetSpeakerMode: FMOD_SPEAKERMODE,
        direction: f32,
        extent: f32,
        rotation: f32,
        lowFrequencyGain: f32,
        overallGain: f32,
        matrixHop: ::std::os::raw::c_int,
        matrix: *mut f32,
        flags: FMOD_DSP_PAN_SURROUND_FLAGS,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_PAN_SUMMONOTOSURROUNDMATRIX_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        targetSpeakerMode: FMOD_SPEAKERMODE,
        direction: f32,
        extent: f32,
        lowFrequencyGain: f32,
        overallGain: f32,
        matrixHop: ::std::os::raw::c_int,
        matrix: *mut f32,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_PAN_SUMSTEREOTOSURROUNDMATRIX_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        targetSpeakerMode: FMOD_SPEAKERMODE,
        direction: f32,
        extent: f32,
        rotation: f32,
        lowFrequencyGain: f32,
        overallGain: f32,
        matrixHop: ::std::os::raw::c_int,
        matrix: *mut f32,
    ) -> FMOD_RESULT,
>;
pub type FMOD_DSP_PAN_GETROLLOFFGAIN_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dsp_state: *mut FMOD_DSP_STATE,
        rolloff: FMOD_DSP_PAN_3D_ROLLOFF_TYPE,
        distance: f32,
        mindistance: f32,
        maxdistance: f32,
        gain: *mut f32,
    ) -> FMOD_RESULT,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_BUFFER_ARRAY {
    pub numbuffers: ::std::os::raw::c_int,
    pub buffernumchannels: *mut ::std::os::raw::c_int,
    pub bufferchannelmask: *mut FMOD_CHANNELMASK,
    pub buffers: *mut *mut f32,
    pub speakermode: FMOD_SPEAKERMODE,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_BUFFER_ARRAY() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_BUFFER_ARRAY>(),
        40usize,
        concat!("Size of: ", stringify!(FMOD_DSP_BUFFER_ARRAY))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_BUFFER_ARRAY>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_BUFFER_ARRAY))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_BUFFER_ARRAY>())).numbuffers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_BUFFER_ARRAY),
            "::",
            stringify!(numbuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_BUFFER_ARRAY>())).buffernumchannels as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_BUFFER_ARRAY),
            "::",
            stringify!(buffernumchannels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_BUFFER_ARRAY>())).bufferchannelmask as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_BUFFER_ARRAY),
            "::",
            stringify!(bufferchannelmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_BUFFER_ARRAY>())).buffers as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_BUFFER_ARRAY),
            "::",
            stringify!(buffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_BUFFER_ARRAY>())).speakermode as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_BUFFER_ARRAY),
            "::",
            stringify!(speakermode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_COMPLEX {
    pub real: f32,
    pub imag: f32,
}
#[test]
fn bindgen_test_layout_FMOD_COMPLEX() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_COMPLEX>(),
        8usize,
        concat!("Size of: ", stringify!(FMOD_COMPLEX))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_COMPLEX>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_COMPLEX))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_COMPLEX>())).real as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_COMPLEX),
            "::",
            stringify!(real)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_COMPLEX>())).imag as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_COMPLEX),
            "::",
            stringify!(imag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR {
    pub numpoints: ::std::os::raw::c_int,
    pub pointparamvalues: *mut f32,
    pub pointpositions: *mut f32,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR>())).numpoints
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR),
            "::",
            stringify!(numpoints)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR>()))
                .pointparamvalues as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR),
            "::",
            stringify!(pointparamvalues)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR>()))
                .pointpositions as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR),
            "::",
            stringify!(pointpositions)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_PARAMETER_FLOAT_MAPPING {
    pub type_: FMOD_DSP_PARAMETER_FLOAT_MAPPING_TYPE,
    pub piecewiselinearmapping: FMOD_DSP_PARAMETER_FLOAT_MAPPING_PIECEWISE_LINEAR,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_FLOAT_MAPPING() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_FLOAT_MAPPING>(),
        32usize,
        concat!("Size of: ", stringify!(FMOD_DSP_PARAMETER_FLOAT_MAPPING))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_FLOAT_MAPPING>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(FMOD_DSP_PARAMETER_FLOAT_MAPPING)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_FLOAT_MAPPING>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_FLOAT_MAPPING),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_FLOAT_MAPPING>())).piecewiselinearmapping
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_FLOAT_MAPPING),
            "::",
            stringify!(piecewiselinearmapping)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_PARAMETER_DESC_FLOAT {
    pub min: f32,
    pub max: f32,
    pub defaultval: f32,
    pub mapping: FMOD_DSP_PARAMETER_FLOAT_MAPPING,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_DESC_FLOAT() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_DESC_FLOAT>(),
        48usize,
        concat!("Size of: ", stringify!(FMOD_DSP_PARAMETER_DESC_FLOAT))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_DESC_FLOAT>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_PARAMETER_DESC_FLOAT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_DESC_FLOAT>())).min as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC_FLOAT),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_DESC_FLOAT>())).max as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC_FLOAT),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_DESC_FLOAT>())).defaultval as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC_FLOAT),
            "::",
            stringify!(defaultval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_DESC_FLOAT>())).mapping as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC_FLOAT),
            "::",
            stringify!(mapping)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_PARAMETER_DESC_INT {
    pub min: ::std::os::raw::c_int,
    pub max: ::std::os::raw::c_int,
    pub defaultval: ::std::os::raw::c_int,
    pub goestoinf: FMOD_BOOL,
    pub valuenames: *const *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_DESC_INT() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_DESC_INT>(),
        24usize,
        concat!("Size of: ", stringify!(FMOD_DSP_PARAMETER_DESC_INT))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_DESC_INT>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_PARAMETER_DESC_INT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_DESC_INT>())).min as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC_INT),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_DESC_INT>())).max as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC_INT),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_DESC_INT>())).defaultval as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC_INT),
            "::",
            stringify!(defaultval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_DESC_INT>())).goestoinf as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC_INT),
            "::",
            stringify!(goestoinf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_DESC_INT>())).valuenames as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC_INT),
            "::",
            stringify!(valuenames)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_PARAMETER_DESC_BOOL {
    pub defaultval: FMOD_BOOL,
    pub valuenames: *const *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_DESC_BOOL() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_DESC_BOOL>(),
        16usize,
        concat!("Size of: ", stringify!(FMOD_DSP_PARAMETER_DESC_BOOL))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_DESC_BOOL>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_PARAMETER_DESC_BOOL))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_DESC_BOOL>())).defaultval as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC_BOOL),
            "::",
            stringify!(defaultval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_DESC_BOOL>())).valuenames as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC_BOOL),
            "::",
            stringify!(valuenames)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_PARAMETER_DESC_DATA {
    pub datatype: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_DESC_DATA() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_DESC_DATA>(),
        4usize,
        concat!("Size of: ", stringify!(FMOD_DSP_PARAMETER_DESC_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_DESC_DATA>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_PARAMETER_DESC_DATA))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_DESC_DATA>())).datatype as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC_DATA),
            "::",
            stringify!(datatype)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FMOD_DSP_PARAMETER_DESC {
    pub type_: FMOD_DSP_PARAMETER_TYPE,
    pub name: [::std::os::raw::c_char; 16usize],
    pub label: [::std::os::raw::c_char; 16usize],
    pub description: *const ::std::os::raw::c_char,
    pub __bindgen_anon_1: FMOD_DSP_PARAMETER_DESC__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union FMOD_DSP_PARAMETER_DESC__bindgen_ty_1 {
    pub floatdesc: FMOD_DSP_PARAMETER_DESC_FLOAT,
    pub intdesc: FMOD_DSP_PARAMETER_DESC_INT,
    pub booldesc: FMOD_DSP_PARAMETER_DESC_BOOL,
    pub datadesc: FMOD_DSP_PARAMETER_DESC_DATA,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_DESC__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_DESC__bindgen_ty_1>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(FMOD_DSP_PARAMETER_DESC__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_DESC__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(FMOD_DSP_PARAMETER_DESC__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_DESC__bindgen_ty_1>())).floatdesc as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC__bindgen_ty_1),
            "::",
            stringify!(floatdesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_DESC__bindgen_ty_1>())).intdesc as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC__bindgen_ty_1),
            "::",
            stringify!(intdesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_DESC__bindgen_ty_1>())).booldesc as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC__bindgen_ty_1),
            "::",
            stringify!(booldesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_DESC__bindgen_ty_1>())).datadesc as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC__bindgen_ty_1),
            "::",
            stringify!(datadesc)
        )
    );
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_DESC() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_DESC>(),
        96usize,
        concat!("Size of: ", stringify!(FMOD_DSP_PARAMETER_DESC))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_DESC>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_PARAMETER_DESC))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_DESC>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_DESC>())).name as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_DESC>())).label as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_DESC>())).description as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_DESC),
            "::",
            stringify!(description)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_PARAMETER_OVERALLGAIN {
    pub linear_gain: f32,
    pub linear_gain_additive: f32,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_OVERALLGAIN() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_OVERALLGAIN>(),
        8usize,
        concat!("Size of: ", stringify!(FMOD_DSP_PARAMETER_OVERALLGAIN))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_OVERALLGAIN>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_PARAMETER_OVERALLGAIN))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_OVERALLGAIN>())).linear_gain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_OVERALLGAIN),
            "::",
            stringify!(linear_gain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_OVERALLGAIN>())).linear_gain_additive
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_OVERALLGAIN),
            "::",
            stringify!(linear_gain_additive)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_PARAMETER_3DATTRIBUTES {
    pub relative: FMOD_3D_ATTRIBUTES,
    pub absolute: FMOD_3D_ATTRIBUTES,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_3DATTRIBUTES() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_3DATTRIBUTES>(),
        96usize,
        concat!("Size of: ", stringify!(FMOD_DSP_PARAMETER_3DATTRIBUTES))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_3DATTRIBUTES>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_PARAMETER_3DATTRIBUTES))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_3DATTRIBUTES>())).relative as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_3DATTRIBUTES),
            "::",
            stringify!(relative)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_3DATTRIBUTES>())).absolute as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_3DATTRIBUTES),
            "::",
            stringify!(absolute)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI {
    pub numlisteners: ::std::os::raw::c_int,
    pub relative: [FMOD_3D_ATTRIBUTES; 8usize],
    pub weight: [f32; 8usize],
    pub absolute: FMOD_3D_ATTRIBUTES,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI>(),
        468usize,
        concat!(
            "Size of: ",
            stringify!(FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI>())).numlisteners
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI),
            "::",
            stringify!(numlisteners)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI>())).relative as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI),
            "::",
            stringify!(relative)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI>())).weight as *const _
                as usize
        },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI),
            "::",
            stringify!(weight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI>())).absolute as *const _
                as usize
        },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_3DATTRIBUTES_MULTI),
            "::",
            stringify!(absolute)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_PARAMETER_SIDECHAIN {
    pub sidechainenable: FMOD_BOOL,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_SIDECHAIN() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_SIDECHAIN>(),
        4usize,
        concat!("Size of: ", stringify!(FMOD_DSP_PARAMETER_SIDECHAIN))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_SIDECHAIN>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_PARAMETER_SIDECHAIN))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_SIDECHAIN>())).sidechainenable as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_SIDECHAIN),
            "::",
            stringify!(sidechainenable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_PARAMETER_FFT {
    pub length: ::std::os::raw::c_int,
    pub numchannels: ::std::os::raw::c_int,
    pub spectrum: [*mut f32; 32usize],
}
#[test]
fn bindgen_test_layout_FMOD_DSP_PARAMETER_FFT() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_PARAMETER_FFT>(),
        264usize,
        concat!("Size of: ", stringify!(FMOD_DSP_PARAMETER_FFT))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_PARAMETER_FFT>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_PARAMETER_FFT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_FFT>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_FFT),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_FFT>())).numchannels as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_FFT),
            "::",
            stringify!(numchannels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_PARAMETER_FFT>())).spectrum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_PARAMETER_FFT),
            "::",
            stringify!(spectrum)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_DESCRIPTION {
    pub pluginsdkversion: ::std::os::raw::c_uint,
    pub name: [::std::os::raw::c_char; 32usize],
    pub version: ::std::os::raw::c_uint,
    pub numinputbuffers: ::std::os::raw::c_int,
    pub numoutputbuffers: ::std::os::raw::c_int,
    pub create: FMOD_DSP_CREATE_CALLBACK,
    pub release: FMOD_DSP_RELEASE_CALLBACK,
    pub reset: FMOD_DSP_RESET_CALLBACK,
    pub read: FMOD_DSP_READ_CALLBACK,
    pub process: FMOD_DSP_PROCESS_CALLBACK,
    pub setposition: FMOD_DSP_SETPOSITION_CALLBACK,
    pub numparameters: ::std::os::raw::c_int,
    pub paramdesc: *mut *mut FMOD_DSP_PARAMETER_DESC,
    pub setparameterfloat: FMOD_DSP_SETPARAM_FLOAT_CALLBACK,
    pub setparameterint: FMOD_DSP_SETPARAM_INT_CALLBACK,
    pub setparameterbool: FMOD_DSP_SETPARAM_BOOL_CALLBACK,
    pub setparameterdata: FMOD_DSP_SETPARAM_DATA_CALLBACK,
    pub getparameterfloat: FMOD_DSP_GETPARAM_FLOAT_CALLBACK,
    pub getparameterint: FMOD_DSP_GETPARAM_INT_CALLBACK,
    pub getparameterbool: FMOD_DSP_GETPARAM_BOOL_CALLBACK,
    pub getparameterdata: FMOD_DSP_GETPARAM_DATA_CALLBACK,
    pub shouldiprocess: FMOD_DSP_SHOULDIPROCESS_CALLBACK,
    pub userdata: *mut ::std::os::raw::c_void,
    pub sys_register: FMOD_DSP_SYSTEM_REGISTER_CALLBACK,
    pub sys_deregister: FMOD_DSP_SYSTEM_DEREGISTER_CALLBACK,
    pub sys_mix: FMOD_DSP_SYSTEM_MIX_CALLBACK,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_DESCRIPTION() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_DESCRIPTION>(),
        216usize,
        concat!("Size of: ", stringify!(FMOD_DSP_DESCRIPTION))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_DESCRIPTION>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_DESCRIPTION))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).pluginsdkversion as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(pluginsdkversion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).name as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).version as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).numinputbuffers as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(numinputbuffers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).numoutputbuffers as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(numoutputbuffers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).create as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).release as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).reset as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(reset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).read as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).process as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(process)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).setposition as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(setposition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).numparameters as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(numparameters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).paramdesc as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(paramdesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).setparameterfloat as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(setparameterfloat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).setparameterint as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(setparameterint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).setparameterbool as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(setparameterbool)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).setparameterdata as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(setparameterdata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).getparameterfloat as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(getparameterfloat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).getparameterint as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(getparameterint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).getparameterbool as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(getparameterbool)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).getparameterdata as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(getparameterdata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).shouldiprocess as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(shouldiprocess)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).userdata as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(userdata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).sys_register as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(sys_register)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).sys_deregister as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(sys_deregister)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_DESCRIPTION>())).sys_mix as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_DESCRIPTION),
            "::",
            stringify!(sys_mix)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_STATE_DFT_FUNCTIONS {
    pub fftreal: FMOD_DSP_DFT_FFTREAL_FUNC,
    pub inversefftreal: FMOD_DSP_DFT_IFFTREAL_FUNC,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_STATE_DFT_FUNCTIONS() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_STATE_DFT_FUNCTIONS>(),
        16usize,
        concat!("Size of: ", stringify!(FMOD_DSP_STATE_DFT_FUNCTIONS))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_STATE_DFT_FUNCTIONS>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_STATE_DFT_FUNCTIONS))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_STATE_DFT_FUNCTIONS>())).fftreal as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_DFT_FUNCTIONS),
            "::",
            stringify!(fftreal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_STATE_DFT_FUNCTIONS>())).inversefftreal as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_DFT_FUNCTIONS),
            "::",
            stringify!(inversefftreal)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_STATE_PAN_FUNCTIONS {
    pub summonomatrix: FMOD_DSP_PAN_SUMMONOMATRIX_FUNC,
    pub sumstereomatrix: FMOD_DSP_PAN_SUMSTEREOMATRIX_FUNC,
    pub sumsurroundmatrix: FMOD_DSP_PAN_SUMSURROUNDMATRIX_FUNC,
    pub summonotosurroundmatrix: FMOD_DSP_PAN_SUMMONOTOSURROUNDMATRIX_FUNC,
    pub sumstereotosurroundmatrix: FMOD_DSP_PAN_SUMSTEREOTOSURROUNDMATRIX_FUNC,
    pub getrolloffgain: FMOD_DSP_PAN_GETROLLOFFGAIN_FUNC,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_STATE_PAN_FUNCTIONS() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_STATE_PAN_FUNCTIONS>(),
        48usize,
        concat!("Size of: ", stringify!(FMOD_DSP_STATE_PAN_FUNCTIONS))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_STATE_PAN_FUNCTIONS>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_STATE_PAN_FUNCTIONS))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_STATE_PAN_FUNCTIONS>())).summonomatrix as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_PAN_FUNCTIONS),
            "::",
            stringify!(summonomatrix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_STATE_PAN_FUNCTIONS>())).sumstereomatrix as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_PAN_FUNCTIONS),
            "::",
            stringify!(sumstereomatrix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_STATE_PAN_FUNCTIONS>())).sumsurroundmatrix as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_PAN_FUNCTIONS),
            "::",
            stringify!(sumsurroundmatrix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_STATE_PAN_FUNCTIONS>())).summonotosurroundmatrix
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_PAN_FUNCTIONS),
            "::",
            stringify!(summonotosurroundmatrix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_STATE_PAN_FUNCTIONS>())).sumstereotosurroundmatrix
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_PAN_FUNCTIONS),
            "::",
            stringify!(sumstereotosurroundmatrix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_STATE_PAN_FUNCTIONS>())).getrolloffgain as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_PAN_FUNCTIONS),
            "::",
            stringify!(getrolloffgain)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_STATE_FUNCTIONS {
    pub alloc: FMOD_DSP_ALLOC_FUNC,
    pub realloc: FMOD_DSP_REALLOC_FUNC,
    pub free: FMOD_DSP_FREE_FUNC,
    pub getsamplerate: FMOD_DSP_GETSAMPLERATE_FUNC,
    pub getblocksize: FMOD_DSP_GETBLOCKSIZE_FUNC,
    pub dft: *mut FMOD_DSP_STATE_DFT_FUNCTIONS,
    pub pan: *mut FMOD_DSP_STATE_PAN_FUNCTIONS,
    pub getspeakermode: FMOD_DSP_GETSPEAKERMODE_FUNC,
    pub getclock: FMOD_DSP_GETCLOCK_FUNC,
    pub getlistenerattributes: FMOD_DSP_GETLISTENERATTRIBUTES_FUNC,
    pub log: FMOD_DSP_LOG_FUNC,
    pub getuserdata: FMOD_DSP_GETUSERDATA_FUNC,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_STATE_FUNCTIONS() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_STATE_FUNCTIONS>(),
        96usize,
        concat!("Size of: ", stringify!(FMOD_DSP_STATE_FUNCTIONS))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_STATE_FUNCTIONS>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_STATE_FUNCTIONS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_STATE_FUNCTIONS>())).alloc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_FUNCTIONS),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_STATE_FUNCTIONS>())).realloc as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_FUNCTIONS),
            "::",
            stringify!(realloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_STATE_FUNCTIONS>())).free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_FUNCTIONS),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_STATE_FUNCTIONS>())).getsamplerate as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_FUNCTIONS),
            "::",
            stringify!(getsamplerate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_STATE_FUNCTIONS>())).getblocksize as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_FUNCTIONS),
            "::",
            stringify!(getblocksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_STATE_FUNCTIONS>())).dft as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_FUNCTIONS),
            "::",
            stringify!(dft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_STATE_FUNCTIONS>())).pan as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_FUNCTIONS),
            "::",
            stringify!(pan)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_STATE_FUNCTIONS>())).getspeakermode as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_FUNCTIONS),
            "::",
            stringify!(getspeakermode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_STATE_FUNCTIONS>())).getclock as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_FUNCTIONS),
            "::",
            stringify!(getclock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_STATE_FUNCTIONS>())).getlistenerattributes as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_FUNCTIONS),
            "::",
            stringify!(getlistenerattributes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_STATE_FUNCTIONS>())).log as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_FUNCTIONS),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_STATE_FUNCTIONS>())).getuserdata as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE_FUNCTIONS),
            "::",
            stringify!(getuserdata)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_STATE {
    pub instance: *mut ::std::os::raw::c_void,
    pub plugindata: *mut ::std::os::raw::c_void,
    pub channelmask: FMOD_CHANNELMASK,
    pub source_speakermode: FMOD_SPEAKERMODE,
    pub sidechaindata: *mut f32,
    pub sidechainchannels: ::std::os::raw::c_int,
    pub functions: *mut FMOD_DSP_STATE_FUNCTIONS,
    pub systemobject: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_STATE() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_STATE>(),
        56usize,
        concat!("Size of: ", stringify!(FMOD_DSP_STATE))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_STATE>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_STATE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_STATE>())).instance as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE),
            "::",
            stringify!(instance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_STATE>())).plugindata as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE),
            "::",
            stringify!(plugindata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_STATE>())).channelmask as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE),
            "::",
            stringify!(channelmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_STATE>())).source_speakermode as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE),
            "::",
            stringify!(source_speakermode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_STATE>())).sidechaindata as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE),
            "::",
            stringify!(sidechaindata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_STATE>())).sidechainchannels as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE),
            "::",
            stringify!(sidechainchannels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_STATE>())).functions as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE),
            "::",
            stringify!(functions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_STATE>())).systemobject as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_STATE),
            "::",
            stringify!(systemobject)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_DSP_METERING_INFO {
    pub numsamples: ::std::os::raw::c_int,
    pub peaklevel: [f32; 32usize],
    pub rmslevel: [f32; 32usize],
    pub numchannels: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_FMOD_DSP_METERING_INFO() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_DSP_METERING_INFO>(),
        264usize,
        concat!("Size of: ", stringify!(FMOD_DSP_METERING_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_DSP_METERING_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_DSP_METERING_INFO))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_METERING_INFO>())).numsamples as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_METERING_INFO),
            "::",
            stringify!(numsamples)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_METERING_INFO>())).peaklevel as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_METERING_INFO),
            "::",
            stringify!(peaklevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_DSP_METERING_INFO>())).rmslevel as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_METERING_INFO),
            "::",
            stringify!(rmslevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_DSP_METERING_INFO>())).numchannels as *const _ as usize
        },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_DSP_METERING_INFO),
            "::",
            stringify!(numchannels)
        )
    );
}
pub type FMOD_OUTPUT_METHOD = ::std::os::raw::c_uint;
pub type FMOD_OUTPUT_GETNUMDRIVERS_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        numdrivers: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_GETDRIVERINFO_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        id: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        namelen: ::std::os::raw::c_int,
        guid: *mut FMOD_GUID,
        systemrate: *mut ::std::os::raw::c_int,
        speakermode: *mut FMOD_SPEAKERMODE,
        speakermodechannels: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_INIT_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        selecteddriver: ::std::os::raw::c_int,
        flags: FMOD_INITFLAGS,
        outputrate: *mut ::std::os::raw::c_int,
        speakermode: *mut FMOD_SPEAKERMODE,
        speakermodechannels: *mut ::std::os::raw::c_int,
        outputformat: *mut FMOD_SOUND_FORMAT,
        dspbufferlength: ::std::os::raw::c_int,
        dspnumbuffers: ::std::os::raw::c_int,
        extradriverdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_START_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(output_state: *mut FMOD_OUTPUT_STATE) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_STOP_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(output_state: *mut FMOD_OUTPUT_STATE) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_CLOSE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(output_state: *mut FMOD_OUTPUT_STATE) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_UPDATE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(output_state: *mut FMOD_OUTPUT_STATE) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_GETHANDLE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        handle: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_GETPOSITION_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        pcm: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_LOCK_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        offset: ::std::os::raw::c_uint,
        length: ::std::os::raw::c_uint,
        ptr1: *mut *mut ::std::os::raw::c_void,
        ptr2: *mut *mut ::std::os::raw::c_void,
        len1: *mut ::std::os::raw::c_uint,
        len2: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_UNLOCK_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        ptr1: *mut ::std::os::raw::c_void,
        ptr2: *mut ::std::os::raw::c_void,
        len1: ::std::os::raw::c_uint,
        len2: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_MIXER_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(output_state: *mut FMOD_OUTPUT_STATE) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_OBJECT3DGETINFO_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        maxhardwareobjects: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_OBJECT3DALLOC_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        object3d: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_OBJECT3DFREE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        object3d: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_OBJECT3DUPDATE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        object3d: *mut ::std::os::raw::c_void,
        info: *const FMOD_OUTPUT_OBJECT3DINFO,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_OPENPORT_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        portType: FMOD_PORT_TYPE,
        portIndex: FMOD_PORT_INDEX,
        portId: *mut ::std::os::raw::c_int,
        portRate: *mut ::std::os::raw::c_int,
        portChannels: *mut ::std::os::raw::c_int,
        portFormat: *mut FMOD_SOUND_FORMAT,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_CLOSEPORT_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        portId: ::std::os::raw::c_int,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_DEVICELISTCHANGED_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(output_state: *mut FMOD_OUTPUT_STATE) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_READFROMMIXER_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        buffer: *mut ::std::os::raw::c_void,
        length: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_COPYPORT_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        output_state: *mut FMOD_OUTPUT_STATE,
        portId: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
        length: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_REQUESTRESET_FUNC = ::std::option::Option<
    unsafe extern "C" fn(output_state: *mut FMOD_OUTPUT_STATE) -> FMOD_RESULT,
>;
pub type FMOD_OUTPUT_ALLOC_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        size: ::std::os::raw::c_uint,
        align: ::std::os::raw::c_uint,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type FMOD_OUTPUT_FREE_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ),
>;
pub type FMOD_OUTPUT_LOG_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        level: FMOD_DEBUG_FLAGS,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        function: *const ::std::os::raw::c_char,
        string: *const ::std::os::raw::c_char,
        ...
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_OUTPUT_DESCRIPTION {
    pub apiversion: ::std::os::raw::c_uint,
    pub name: *const ::std::os::raw::c_char,
    pub version: ::std::os::raw::c_uint,
    pub method: FMOD_OUTPUT_METHOD,
    pub getnumdrivers: FMOD_OUTPUT_GETNUMDRIVERS_CALLBACK,
    pub getdriverinfo: FMOD_OUTPUT_GETDRIVERINFO_CALLBACK,
    pub init: FMOD_OUTPUT_INIT_CALLBACK,
    pub start: FMOD_OUTPUT_START_CALLBACK,
    pub stop: FMOD_OUTPUT_STOP_CALLBACK,
    pub close: FMOD_OUTPUT_CLOSE_CALLBACK,
    pub update: FMOD_OUTPUT_UPDATE_CALLBACK,
    pub gethandle: FMOD_OUTPUT_GETHANDLE_CALLBACK,
    pub getposition: FMOD_OUTPUT_GETPOSITION_CALLBACK,
    pub lock: FMOD_OUTPUT_LOCK_CALLBACK,
    pub unlock: FMOD_OUTPUT_UNLOCK_CALLBACK,
    pub mixer: FMOD_OUTPUT_MIXER_CALLBACK,
    pub object3dgetinfo: FMOD_OUTPUT_OBJECT3DGETINFO_CALLBACK,
    pub object3dalloc: FMOD_OUTPUT_OBJECT3DALLOC_CALLBACK,
    pub object3dfree: FMOD_OUTPUT_OBJECT3DFREE_CALLBACK,
    pub object3dupdate: FMOD_OUTPUT_OBJECT3DUPDATE_CALLBACK,
    pub openport: FMOD_OUTPUT_OPENPORT_CALLBACK,
    pub closeport: FMOD_OUTPUT_CLOSEPORT_CALLBACK,
    pub devicelistchanged: FMOD_OUTPUT_DEVICELISTCHANGED_CALLBACK,
}
#[test]
fn bindgen_test_layout_FMOD_OUTPUT_DESCRIPTION() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_OUTPUT_DESCRIPTION>(),
        176usize,
        concat!("Size of: ", stringify!(FMOD_OUTPUT_DESCRIPTION))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_OUTPUT_DESCRIPTION>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_OUTPUT_DESCRIPTION))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_OUTPUT_DESCRIPTION>())).apiversion as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(apiversion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_OUTPUT_DESCRIPTION>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_OUTPUT_DESCRIPTION>())).version as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_OUTPUT_DESCRIPTION>())).method as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_OUTPUT_DESCRIPTION>())).getnumdrivers as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(getnumdrivers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_OUTPUT_DESCRIPTION>())).getdriverinfo as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(getdriverinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_OUTPUT_DESCRIPTION>())).init as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_OUTPUT_DESCRIPTION>())).start as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_OUTPUT_DESCRIPTION>())).stop as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(stop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_OUTPUT_DESCRIPTION>())).close as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_OUTPUT_DESCRIPTION>())).update as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_OUTPUT_DESCRIPTION>())).gethandle as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(gethandle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_OUTPUT_DESCRIPTION>())).getposition as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(getposition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_OUTPUT_DESCRIPTION>())).lock as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_OUTPUT_DESCRIPTION>())).unlock as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(unlock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_OUTPUT_DESCRIPTION>())).mixer as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(mixer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_OUTPUT_DESCRIPTION>())).object3dgetinfo as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(object3dgetinfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_OUTPUT_DESCRIPTION>())).object3dalloc as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(object3dalloc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_OUTPUT_DESCRIPTION>())).object3dfree as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(object3dfree)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_OUTPUT_DESCRIPTION>())).object3dupdate as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(object3dupdate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_OUTPUT_DESCRIPTION>())).openport as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(openport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_OUTPUT_DESCRIPTION>())).closeport as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(closeport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_OUTPUT_DESCRIPTION>())).devicelistchanged as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_DESCRIPTION),
            "::",
            stringify!(devicelistchanged)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_OUTPUT_STATE {
    pub plugindata: *mut ::std::os::raw::c_void,
    pub readfrommixer: FMOD_OUTPUT_READFROMMIXER_FUNC,
    pub alloc: FMOD_OUTPUT_ALLOC_FUNC,
    pub free: FMOD_OUTPUT_FREE_FUNC,
    pub log: FMOD_OUTPUT_LOG_FUNC,
    pub copyport: FMOD_OUTPUT_COPYPORT_FUNC,
    pub requestreset: FMOD_OUTPUT_REQUESTRESET_FUNC,
}
#[test]
fn bindgen_test_layout_FMOD_OUTPUT_STATE() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_OUTPUT_STATE>(),
        56usize,
        concat!("Size of: ", stringify!(FMOD_OUTPUT_STATE))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_OUTPUT_STATE>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_OUTPUT_STATE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_OUTPUT_STATE>())).plugindata as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_STATE),
            "::",
            stringify!(plugindata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_OUTPUT_STATE>())).readfrommixer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_STATE),
            "::",
            stringify!(readfrommixer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_OUTPUT_STATE>())).alloc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_STATE),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_OUTPUT_STATE>())).free as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_STATE),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_OUTPUT_STATE>())).log as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_STATE),
            "::",
            stringify!(log)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_OUTPUT_STATE>())).copyport as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_STATE),
            "::",
            stringify!(copyport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_OUTPUT_STATE>())).requestreset as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_STATE),
            "::",
            stringify!(requestreset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_OUTPUT_OBJECT3DINFO {
    pub buffer: *mut f32,
    pub bufferlength: ::std::os::raw::c_uint,
    pub position: FMOD_VECTOR,
    pub gain: f32,
    pub spread: f32,
    pub priority: f32,
}
#[test]
fn bindgen_test_layout_FMOD_OUTPUT_OBJECT3DINFO() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_OUTPUT_OBJECT3DINFO>(),
        40usize,
        concat!("Size of: ", stringify!(FMOD_OUTPUT_OBJECT3DINFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_OUTPUT_OBJECT3DINFO>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_OUTPUT_OBJECT3DINFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_OUTPUT_OBJECT3DINFO>())).buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_OBJECT3DINFO),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_OUTPUT_OBJECT3DINFO>())).bufferlength as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_OBJECT3DINFO),
            "::",
            stringify!(bufferlength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_OUTPUT_OBJECT3DINFO>())).position as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_OBJECT3DINFO),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_OUTPUT_OBJECT3DINFO>())).gain as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_OBJECT3DINFO),
            "::",
            stringify!(gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_OUTPUT_OBJECT3DINFO>())).spread as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_OBJECT3DINFO),
            "::",
            stringify!(spread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_OUTPUT_OBJECT3DINFO>())).priority as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_OUTPUT_OBJECT3DINFO),
            "::",
            stringify!(priority)
        )
    );
}
extern "C" {
    pub fn FMOD_Memory_Initialize(
        poolmem: *mut ::std::os::raw::c_void,
        poollen: ::std::os::raw::c_int,
        useralloc: FMOD_MEMORY_ALLOC_CALLBACK,
        userrealloc: FMOD_MEMORY_REALLOC_CALLBACK,
        userfree: FMOD_MEMORY_FREE_CALLBACK,
        memtypeflags: FMOD_MEMORY_TYPE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Memory_GetStats(
        currentalloced: *mut ::std::os::raw::c_int,
        maxalloced: *mut ::std::os::raw::c_int,
        blocking: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Debug_Initialize(
        flags: FMOD_DEBUG_FLAGS,
        mode: FMOD_DEBUG_MODE,
        callback: FMOD_DEBUG_CALLBACK,
        filename: *const ::std::os::raw::c_char,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_File_SetDiskBusy(busy: ::std::os::raw::c_int) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_File_GetDiskBusy(busy: *mut ::std::os::raw::c_int) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Thread_SetAttributes(
        type_: FMOD_THREAD_TYPE,
        affinity: FMOD_THREAD_AFFINITY,
        priority: FMOD_THREAD_PRIORITY,
        stacksize: FMOD_THREAD_STACK_SIZE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Create(system: *mut *mut FMOD_SYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Release(system: *mut FMOD_SYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetOutput(system: *mut FMOD_SYSTEM, output: FMOD_OUTPUTTYPE) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetOutput(
        system: *mut FMOD_SYSTEM,
        output: *mut FMOD_OUTPUTTYPE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetNumDrivers(
        system: *mut FMOD_SYSTEM,
        numdrivers: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetDriverInfo(
        system: *mut FMOD_SYSTEM,
        id: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        namelen: ::std::os::raw::c_int,
        guid: *mut FMOD_GUID,
        systemrate: *mut ::std::os::raw::c_int,
        speakermode: *mut FMOD_SPEAKERMODE,
        speakermodechannels: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetDriver(
        system: *mut FMOD_SYSTEM,
        driver: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetDriver(
        system: *mut FMOD_SYSTEM,
        driver: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetSoftwareChannels(
        system: *mut FMOD_SYSTEM,
        numsoftwarechannels: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetSoftwareChannels(
        system: *mut FMOD_SYSTEM,
        numsoftwarechannels: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetSoftwareFormat(
        system: *mut FMOD_SYSTEM,
        samplerate: ::std::os::raw::c_int,
        speakermode: FMOD_SPEAKERMODE,
        numrawspeakers: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetSoftwareFormat(
        system: *mut FMOD_SYSTEM,
        samplerate: *mut ::std::os::raw::c_int,
        speakermode: *mut FMOD_SPEAKERMODE,
        numrawspeakers: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetDSPBufferSize(
        system: *mut FMOD_SYSTEM,
        bufferlength: ::std::os::raw::c_uint,
        numbuffers: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetDSPBufferSize(
        system: *mut FMOD_SYSTEM,
        bufferlength: *mut ::std::os::raw::c_uint,
        numbuffers: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetFileSystem(
        system: *mut FMOD_SYSTEM,
        useropen: FMOD_FILE_OPEN_CALLBACK,
        userclose: FMOD_FILE_CLOSE_CALLBACK,
        userread: FMOD_FILE_READ_CALLBACK,
        userseek: FMOD_FILE_SEEK_CALLBACK,
        userasyncread: FMOD_FILE_ASYNCREAD_CALLBACK,
        userasynccancel: FMOD_FILE_ASYNCCANCEL_CALLBACK,
        blockalign: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_AttachFileSystem(
        system: *mut FMOD_SYSTEM,
        useropen: FMOD_FILE_OPEN_CALLBACK,
        userclose: FMOD_FILE_CLOSE_CALLBACK,
        userread: FMOD_FILE_READ_CALLBACK,
        userseek: FMOD_FILE_SEEK_CALLBACK,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetAdvancedSettings(
        system: *mut FMOD_SYSTEM,
        settings: *mut FMOD_ADVANCEDSETTINGS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetAdvancedSettings(
        system: *mut FMOD_SYSTEM,
        settings: *mut FMOD_ADVANCEDSETTINGS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetCallback(
        system: *mut FMOD_SYSTEM,
        callback: FMOD_SYSTEM_CALLBACK,
        callbackmask: FMOD_SYSTEM_CALLBACK_TYPE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetPluginPath(
        system: *mut FMOD_SYSTEM,
        path: *const ::std::os::raw::c_char,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_LoadPlugin(
        system: *mut FMOD_SYSTEM,
        filename: *const ::std::os::raw::c_char,
        handle: *mut ::std::os::raw::c_uint,
        priority: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_UnloadPlugin(
        system: *mut FMOD_SYSTEM,
        handle: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetNumNestedPlugins(
        system: *mut FMOD_SYSTEM,
        handle: ::std::os::raw::c_uint,
        count: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetNestedPlugin(
        system: *mut FMOD_SYSTEM,
        handle: ::std::os::raw::c_uint,
        index: ::std::os::raw::c_int,
        nestedhandle: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetNumPlugins(
        system: *mut FMOD_SYSTEM,
        plugintype: FMOD_PLUGINTYPE,
        numplugins: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetPluginHandle(
        system: *mut FMOD_SYSTEM,
        plugintype: FMOD_PLUGINTYPE,
        index: ::std::os::raw::c_int,
        handle: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetPluginInfo(
        system: *mut FMOD_SYSTEM,
        handle: ::std::os::raw::c_uint,
        plugintype: *mut FMOD_PLUGINTYPE,
        name: *mut ::std::os::raw::c_char,
        namelen: ::std::os::raw::c_int,
        version: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetOutputByPlugin(
        system: *mut FMOD_SYSTEM,
        handle: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetOutputByPlugin(
        system: *mut FMOD_SYSTEM,
        handle: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_CreateDSPByPlugin(
        system: *mut FMOD_SYSTEM,
        handle: ::std::os::raw::c_uint,
        dsp: *mut *mut FMOD_DSP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetDSPInfoByPlugin(
        system: *mut FMOD_SYSTEM,
        handle: ::std::os::raw::c_uint,
        description: *mut *const FMOD_DSP_DESCRIPTION,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_RegisterCodec(
        system: *mut FMOD_SYSTEM,
        description: *mut FMOD_CODEC_DESCRIPTION,
        handle: *mut ::std::os::raw::c_uint,
        priority: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_RegisterDSP(
        system: *mut FMOD_SYSTEM,
        description: *const FMOD_DSP_DESCRIPTION,
        handle: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_RegisterOutput(
        system: *mut FMOD_SYSTEM,
        description: *const FMOD_OUTPUT_DESCRIPTION,
        handle: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Init(
        system: *mut FMOD_SYSTEM,
        maxchannels: ::std::os::raw::c_int,
        flags: FMOD_INITFLAGS,
        extradriverdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Close(system: *mut FMOD_SYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Update(system: *mut FMOD_SYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetSpeakerPosition(
        system: *mut FMOD_SYSTEM,
        speaker: FMOD_SPEAKER,
        x: f32,
        y: f32,
        active: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetSpeakerPosition(
        system: *mut FMOD_SYSTEM,
        speaker: FMOD_SPEAKER,
        x: *mut f32,
        y: *mut f32,
        active: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetStreamBufferSize(
        system: *mut FMOD_SYSTEM,
        filebuffersize: ::std::os::raw::c_uint,
        filebuffersizetype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetStreamBufferSize(
        system: *mut FMOD_SYSTEM,
        filebuffersize: *mut ::std::os::raw::c_uint,
        filebuffersizetype: *mut FMOD_TIMEUNIT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Set3DSettings(
        system: *mut FMOD_SYSTEM,
        dopplerscale: f32,
        distancefactor: f32,
        rolloffscale: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Get3DSettings(
        system: *mut FMOD_SYSTEM,
        dopplerscale: *mut f32,
        distancefactor: *mut f32,
        rolloffscale: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Set3DNumListeners(
        system: *mut FMOD_SYSTEM,
        numlisteners: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Get3DNumListeners(
        system: *mut FMOD_SYSTEM,
        numlisteners: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Set3DListenerAttributes(
        system: *mut FMOD_SYSTEM,
        listener: ::std::os::raw::c_int,
        pos: *const FMOD_VECTOR,
        vel: *const FMOD_VECTOR,
        forward: *const FMOD_VECTOR,
        up: *const FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Get3DListenerAttributes(
        system: *mut FMOD_SYSTEM,
        listener: ::std::os::raw::c_int,
        pos: *mut FMOD_VECTOR,
        vel: *mut FMOD_VECTOR,
        forward: *mut FMOD_VECTOR,
        up: *mut FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_Set3DRolloffCallback(
        system: *mut FMOD_SYSTEM,
        callback: FMOD_3D_ROLLOFF_CALLBACK,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_MixerSuspend(system: *mut FMOD_SYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_MixerResume(system: *mut FMOD_SYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetDefaultMixMatrix(
        system: *mut FMOD_SYSTEM,
        sourcespeakermode: FMOD_SPEAKERMODE,
        targetspeakermode: FMOD_SPEAKERMODE,
        matrix: *mut f32,
        matrixhop: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetSpeakerModeChannels(
        system: *mut FMOD_SYSTEM,
        mode: FMOD_SPEAKERMODE,
        channels: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetVersion(
        system: *mut FMOD_SYSTEM,
        version: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetOutputHandle(
        system: *mut FMOD_SYSTEM,
        handle: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetChannelsPlaying(
        system: *mut FMOD_SYSTEM,
        channels: *mut ::std::os::raw::c_int,
        realchannels: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetCPUUsage(
        system: *mut FMOD_SYSTEM,
        dsp: *mut f32,
        stream: *mut f32,
        geometry: *mut f32,
        update: *mut f32,
        total: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetCPUUsageEx(
        system: *mut FMOD_SYSTEM,
        convolutionThread1: *mut f32,
        convolutionThread2: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetFileUsage(
        system: *mut FMOD_SYSTEM,
        sampleBytesRead: *mut ::std::os::raw::c_longlong,
        streamBytesRead: *mut ::std::os::raw::c_longlong,
        otherBytesRead: *mut ::std::os::raw::c_longlong,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_CreateSound(
        system: *mut FMOD_SYSTEM,
        name_or_data: *const ::std::os::raw::c_char,
        mode: FMOD_MODE,
        exinfo: *mut FMOD_CREATESOUNDEXINFO,
        sound: *mut *mut FMOD_SOUND,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_CreateStream(
        system: *mut FMOD_SYSTEM,
        name_or_data: *const ::std::os::raw::c_char,
        mode: FMOD_MODE,
        exinfo: *mut FMOD_CREATESOUNDEXINFO,
        sound: *mut *mut FMOD_SOUND,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_CreateDSP(
        system: *mut FMOD_SYSTEM,
        description: *const FMOD_DSP_DESCRIPTION,
        dsp: *mut *mut FMOD_DSP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_CreateDSPByType(
        system: *mut FMOD_SYSTEM,
        type_: FMOD_DSP_TYPE,
        dsp: *mut *mut FMOD_DSP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_CreateChannelGroup(
        system: *mut FMOD_SYSTEM,
        name: *const ::std::os::raw::c_char,
        channelgroup: *mut *mut FMOD_CHANNELGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_CreateSoundGroup(
        system: *mut FMOD_SYSTEM,
        name: *const ::std::os::raw::c_char,
        soundgroup: *mut *mut FMOD_SOUNDGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_CreateReverb3D(
        system: *mut FMOD_SYSTEM,
        reverb: *mut *mut FMOD_REVERB3D,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_PlaySound(
        system: *mut FMOD_SYSTEM,
        sound: *mut FMOD_SOUND,
        channelgroup: *mut FMOD_CHANNELGROUP,
        paused: FMOD_BOOL,
        channel: *mut *mut FMOD_CHANNEL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_PlayDSP(
        system: *mut FMOD_SYSTEM,
        dsp: *mut FMOD_DSP,
        channelgroup: *mut FMOD_CHANNELGROUP,
        paused: FMOD_BOOL,
        channel: *mut *mut FMOD_CHANNEL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetChannel(
        system: *mut FMOD_SYSTEM,
        channelid: ::std::os::raw::c_int,
        channel: *mut *mut FMOD_CHANNEL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetDSPInfoByType(
        system: *mut FMOD_SYSTEM,
        type_: FMOD_DSP_TYPE,
        description: *mut *const FMOD_DSP_DESCRIPTION,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetMasterChannelGroup(
        system: *mut FMOD_SYSTEM,
        channelgroup: *mut *mut FMOD_CHANNELGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetMasterSoundGroup(
        system: *mut FMOD_SYSTEM,
        soundgroup: *mut *mut FMOD_SOUNDGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_AttachChannelGroupToPort(
        system: *mut FMOD_SYSTEM,
        portType: FMOD_PORT_TYPE,
        portIndex: FMOD_PORT_INDEX,
        channelgroup: *mut FMOD_CHANNELGROUP,
        passThru: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_DetachChannelGroupFromPort(
        system: *mut FMOD_SYSTEM,
        channelgroup: *mut FMOD_CHANNELGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetReverbProperties(
        system: *mut FMOD_SYSTEM,
        instance: ::std::os::raw::c_int,
        prop: *const FMOD_REVERB_PROPERTIES,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetReverbProperties(
        system: *mut FMOD_SYSTEM,
        instance: ::std::os::raw::c_int,
        prop: *mut FMOD_REVERB_PROPERTIES,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_LockDSP(system: *mut FMOD_SYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_UnlockDSP(system: *mut FMOD_SYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetRecordNumDrivers(
        system: *mut FMOD_SYSTEM,
        numdrivers: *mut ::std::os::raw::c_int,
        numconnected: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetRecordDriverInfo(
        system: *mut FMOD_SYSTEM,
        id: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        namelen: ::std::os::raw::c_int,
        guid: *mut FMOD_GUID,
        systemrate: *mut ::std::os::raw::c_int,
        speakermode: *mut FMOD_SPEAKERMODE,
        speakermodechannels: *mut ::std::os::raw::c_int,
        state: *mut FMOD_DRIVER_STATE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetRecordPosition(
        system: *mut FMOD_SYSTEM,
        id: ::std::os::raw::c_int,
        position: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_RecordStart(
        system: *mut FMOD_SYSTEM,
        id: ::std::os::raw::c_int,
        sound: *mut FMOD_SOUND,
        loop_: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_RecordStop(
        system: *mut FMOD_SYSTEM,
        id: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_IsRecording(
        system: *mut FMOD_SYSTEM,
        id: ::std::os::raw::c_int,
        recording: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_CreateGeometry(
        system: *mut FMOD_SYSTEM,
        maxpolygons: ::std::os::raw::c_int,
        maxvertices: ::std::os::raw::c_int,
        geometry: *mut *mut FMOD_GEOMETRY,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetGeometrySettings(
        system: *mut FMOD_SYSTEM,
        maxworldsize: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetGeometrySettings(
        system: *mut FMOD_SYSTEM,
        maxworldsize: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_LoadGeometry(
        system: *mut FMOD_SYSTEM,
        data: *const ::std::os::raw::c_void,
        datasize: ::std::os::raw::c_int,
        geometry: *mut *mut FMOD_GEOMETRY,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetGeometryOcclusion(
        system: *mut FMOD_SYSTEM,
        listener: *const FMOD_VECTOR,
        source: *const FMOD_VECTOR,
        direct: *mut f32,
        reverb: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetNetworkProxy(
        system: *mut FMOD_SYSTEM,
        proxy: *const ::std::os::raw::c_char,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetNetworkProxy(
        system: *mut FMOD_SYSTEM,
        proxy: *mut ::std::os::raw::c_char,
        proxylen: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetNetworkTimeout(
        system: *mut FMOD_SYSTEM,
        timeout: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetNetworkTimeout(
        system: *mut FMOD_SYSTEM,
        timeout: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_SetUserData(
        system: *mut FMOD_SYSTEM,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_System_GetUserData(
        system: *mut FMOD_SYSTEM,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_Release(sound: *mut FMOD_SOUND) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetSystemObject(
        sound: *mut FMOD_SOUND,
        system: *mut *mut FMOD_SYSTEM,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_Lock(
        sound: *mut FMOD_SOUND,
        offset: ::std::os::raw::c_uint,
        length: ::std::os::raw::c_uint,
        ptr1: *mut *mut ::std::os::raw::c_void,
        ptr2: *mut *mut ::std::os::raw::c_void,
        len1: *mut ::std::os::raw::c_uint,
        len2: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_Unlock(
        sound: *mut FMOD_SOUND,
        ptr1: *mut ::std::os::raw::c_void,
        ptr2: *mut ::std::os::raw::c_void,
        len1: ::std::os::raw::c_uint,
        len2: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_SetDefaults(
        sound: *mut FMOD_SOUND,
        frequency: f32,
        priority: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetDefaults(
        sound: *mut FMOD_SOUND,
        frequency: *mut f32,
        priority: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_Set3DMinMaxDistance(
        sound: *mut FMOD_SOUND,
        min: f32,
        max: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_Get3DMinMaxDistance(
        sound: *mut FMOD_SOUND,
        min: *mut f32,
        max: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_Set3DConeSettings(
        sound: *mut FMOD_SOUND,
        insideconeangle: f32,
        outsideconeangle: f32,
        outsidevolume: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_Get3DConeSettings(
        sound: *mut FMOD_SOUND,
        insideconeangle: *mut f32,
        outsideconeangle: *mut f32,
        outsidevolume: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_Set3DCustomRolloff(
        sound: *mut FMOD_SOUND,
        points: *mut FMOD_VECTOR,
        numpoints: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_Get3DCustomRolloff(
        sound: *mut FMOD_SOUND,
        points: *mut *mut FMOD_VECTOR,
        numpoints: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetSubSound(
        sound: *mut FMOD_SOUND,
        index: ::std::os::raw::c_int,
        subsound: *mut *mut FMOD_SOUND,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetSubSoundParent(
        sound: *mut FMOD_SOUND,
        parentsound: *mut *mut FMOD_SOUND,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetName(
        sound: *mut FMOD_SOUND,
        name: *mut ::std::os::raw::c_char,
        namelen: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetLength(
        sound: *mut FMOD_SOUND,
        length: *mut ::std::os::raw::c_uint,
        lengthtype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetFormat(
        sound: *mut FMOD_SOUND,
        type_: *mut FMOD_SOUND_TYPE,
        format: *mut FMOD_SOUND_FORMAT,
        channels: *mut ::std::os::raw::c_int,
        bits: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetNumSubSounds(
        sound: *mut FMOD_SOUND,
        numsubsounds: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetNumTags(
        sound: *mut FMOD_SOUND,
        numtags: *mut ::std::os::raw::c_int,
        numtagsupdated: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetTag(
        sound: *mut FMOD_SOUND,
        name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        tag: *mut FMOD_TAG,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetOpenState(
        sound: *mut FMOD_SOUND,
        openstate: *mut FMOD_OPENSTATE,
        percentbuffered: *mut ::std::os::raw::c_uint,
        starving: *mut FMOD_BOOL,
        diskbusy: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_ReadData(
        sound: *mut FMOD_SOUND,
        buffer: *mut ::std::os::raw::c_void,
        length: ::std::os::raw::c_uint,
        read: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_SeekData(sound: *mut FMOD_SOUND, pcm: ::std::os::raw::c_uint) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_SetSoundGroup(
        sound: *mut FMOD_SOUND,
        soundgroup: *mut FMOD_SOUNDGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetSoundGroup(
        sound: *mut FMOD_SOUND,
        soundgroup: *mut *mut FMOD_SOUNDGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetNumSyncPoints(
        sound: *mut FMOD_SOUND,
        numsyncpoints: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetSyncPoint(
        sound: *mut FMOD_SOUND,
        index: ::std::os::raw::c_int,
        point: *mut *mut FMOD_SYNCPOINT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetSyncPointInfo(
        sound: *mut FMOD_SOUND,
        point: *mut FMOD_SYNCPOINT,
        name: *mut ::std::os::raw::c_char,
        namelen: ::std::os::raw::c_int,
        offset: *mut ::std::os::raw::c_uint,
        offsettype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_AddSyncPoint(
        sound: *mut FMOD_SOUND,
        offset: ::std::os::raw::c_uint,
        offsettype: FMOD_TIMEUNIT,
        name: *const ::std::os::raw::c_char,
        point: *mut *mut FMOD_SYNCPOINT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_DeleteSyncPoint(
        sound: *mut FMOD_SOUND,
        point: *mut FMOD_SYNCPOINT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_SetMode(sound: *mut FMOD_SOUND, mode: FMOD_MODE) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetMode(sound: *mut FMOD_SOUND, mode: *mut FMOD_MODE) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_SetLoopCount(
        sound: *mut FMOD_SOUND,
        loopcount: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetLoopCount(
        sound: *mut FMOD_SOUND,
        loopcount: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_SetLoopPoints(
        sound: *mut FMOD_SOUND,
        loopstart: ::std::os::raw::c_uint,
        loopstarttype: FMOD_TIMEUNIT,
        loopend: ::std::os::raw::c_uint,
        loopendtype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetLoopPoints(
        sound: *mut FMOD_SOUND,
        loopstart: *mut ::std::os::raw::c_uint,
        loopstarttype: FMOD_TIMEUNIT,
        loopend: *mut ::std::os::raw::c_uint,
        loopendtype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetMusicNumChannels(
        sound: *mut FMOD_SOUND,
        numchannels: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_SetMusicChannelVolume(
        sound: *mut FMOD_SOUND,
        channel: ::std::os::raw::c_int,
        volume: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetMusicChannelVolume(
        sound: *mut FMOD_SOUND,
        channel: ::std::os::raw::c_int,
        volume: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_SetMusicSpeed(sound: *mut FMOD_SOUND, speed: f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetMusicSpeed(sound: *mut FMOD_SOUND, speed: *mut f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_SetUserData(
        sound: *mut FMOD_SOUND,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Sound_GetUserData(
        sound: *mut FMOD_SOUND,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetSystemObject(
        channel: *mut FMOD_CHANNEL,
        system: *mut *mut FMOD_SYSTEM,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Stop(channel: *mut FMOD_CHANNEL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetPaused(channel: *mut FMOD_CHANNEL, paused: FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetPaused(
        channel: *mut FMOD_CHANNEL,
        paused: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetVolume(channel: *mut FMOD_CHANNEL, volume: f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetVolume(channel: *mut FMOD_CHANNEL, volume: *mut f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetVolumeRamp(channel: *mut FMOD_CHANNEL, ramp: FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetVolumeRamp(
        channel: *mut FMOD_CHANNEL,
        ramp: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetAudibility(
        channel: *mut FMOD_CHANNEL,
        audibility: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetPitch(channel: *mut FMOD_CHANNEL, pitch: f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetPitch(channel: *mut FMOD_CHANNEL, pitch: *mut f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetMute(channel: *mut FMOD_CHANNEL, mute: FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetMute(channel: *mut FMOD_CHANNEL, mute: *mut FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetReverbProperties(
        channel: *mut FMOD_CHANNEL,
        instance: ::std::os::raw::c_int,
        wet: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetReverbProperties(
        channel: *mut FMOD_CHANNEL,
        instance: ::std::os::raw::c_int,
        wet: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetLowPassGain(channel: *mut FMOD_CHANNEL, gain: f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetLowPassGain(channel: *mut FMOD_CHANNEL, gain: *mut f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetMode(channel: *mut FMOD_CHANNEL, mode: FMOD_MODE) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetMode(channel: *mut FMOD_CHANNEL, mode: *mut FMOD_MODE) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetCallback(
        channel: *mut FMOD_CHANNEL,
        callback: FMOD_CHANNELCONTROL_CALLBACK,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_IsPlaying(
        channel: *mut FMOD_CHANNEL,
        isplaying: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetPan(channel: *mut FMOD_CHANNEL, pan: f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetMixLevelsOutput(
        channel: *mut FMOD_CHANNEL,
        frontleft: f32,
        frontright: f32,
        center: f32,
        lfe: f32,
        surroundleft: f32,
        surroundright: f32,
        backleft: f32,
        backright: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetMixLevelsInput(
        channel: *mut FMOD_CHANNEL,
        levels: *mut f32,
        numlevels: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetMixMatrix(
        channel: *mut FMOD_CHANNEL,
        matrix: *mut f32,
        outchannels: ::std::os::raw::c_int,
        inchannels: ::std::os::raw::c_int,
        inchannel_hop: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetMixMatrix(
        channel: *mut FMOD_CHANNEL,
        matrix: *mut f32,
        outchannels: *mut ::std::os::raw::c_int,
        inchannels: *mut ::std::os::raw::c_int,
        inchannel_hop: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetDSPClock(
        channel: *mut FMOD_CHANNEL,
        dspclock: *mut ::std::os::raw::c_ulonglong,
        parentclock: *mut ::std::os::raw::c_ulonglong,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetDelay(
        channel: *mut FMOD_CHANNEL,
        dspclock_start: ::std::os::raw::c_ulonglong,
        dspclock_end: ::std::os::raw::c_ulonglong,
        stopchannels: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetDelay(
        channel: *mut FMOD_CHANNEL,
        dspclock_start: *mut ::std::os::raw::c_ulonglong,
        dspclock_end: *mut ::std::os::raw::c_ulonglong,
        stopchannels: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_AddFadePoint(
        channel: *mut FMOD_CHANNEL,
        dspclock: ::std::os::raw::c_ulonglong,
        volume: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetFadePointRamp(
        channel: *mut FMOD_CHANNEL,
        dspclock: ::std::os::raw::c_ulonglong,
        volume: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_RemoveFadePoints(
        channel: *mut FMOD_CHANNEL,
        dspclock_start: ::std::os::raw::c_ulonglong,
        dspclock_end: ::std::os::raw::c_ulonglong,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetFadePoints(
        channel: *mut FMOD_CHANNEL,
        numpoints: *mut ::std::os::raw::c_uint,
        point_dspclock: *mut ::std::os::raw::c_ulonglong,
        point_volume: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetDSP(
        channel: *mut FMOD_CHANNEL,
        index: ::std::os::raw::c_int,
        dsp: *mut *mut FMOD_DSP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_AddDSP(
        channel: *mut FMOD_CHANNEL,
        index: ::std::os::raw::c_int,
        dsp: *mut FMOD_DSP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_RemoveDSP(channel: *mut FMOD_CHANNEL, dsp: *mut FMOD_DSP) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetNumDSPs(
        channel: *mut FMOD_CHANNEL,
        numdsps: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetDSPIndex(
        channel: *mut FMOD_CHANNEL,
        dsp: *mut FMOD_DSP,
        index: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetDSPIndex(
        channel: *mut FMOD_CHANNEL,
        dsp: *mut FMOD_DSP,
        index: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Set3DAttributes(
        channel: *mut FMOD_CHANNEL,
        pos: *const FMOD_VECTOR,
        vel: *const FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Get3DAttributes(
        channel: *mut FMOD_CHANNEL,
        pos: *mut FMOD_VECTOR,
        vel: *mut FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Set3DMinMaxDistance(
        channel: *mut FMOD_CHANNEL,
        mindistance: f32,
        maxdistance: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Get3DMinMaxDistance(
        channel: *mut FMOD_CHANNEL,
        mindistance: *mut f32,
        maxdistance: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Set3DConeSettings(
        channel: *mut FMOD_CHANNEL,
        insideconeangle: f32,
        outsideconeangle: f32,
        outsidevolume: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Get3DConeSettings(
        channel: *mut FMOD_CHANNEL,
        insideconeangle: *mut f32,
        outsideconeangle: *mut f32,
        outsidevolume: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Set3DConeOrientation(
        channel: *mut FMOD_CHANNEL,
        orientation: *mut FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Get3DConeOrientation(
        channel: *mut FMOD_CHANNEL,
        orientation: *mut FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Set3DCustomRolloff(
        channel: *mut FMOD_CHANNEL,
        points: *mut FMOD_VECTOR,
        numpoints: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Get3DCustomRolloff(
        channel: *mut FMOD_CHANNEL,
        points: *mut *mut FMOD_VECTOR,
        numpoints: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Set3DOcclusion(
        channel: *mut FMOD_CHANNEL,
        directocclusion: f32,
        reverbocclusion: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Get3DOcclusion(
        channel: *mut FMOD_CHANNEL,
        directocclusion: *mut f32,
        reverbocclusion: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Set3DSpread(channel: *mut FMOD_CHANNEL, angle: f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Get3DSpread(channel: *mut FMOD_CHANNEL, angle: *mut f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Set3DLevel(channel: *mut FMOD_CHANNEL, level: f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Get3DLevel(channel: *mut FMOD_CHANNEL, level: *mut f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Set3DDopplerLevel(channel: *mut FMOD_CHANNEL, level: f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Get3DDopplerLevel(
        channel: *mut FMOD_CHANNEL,
        level: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Set3DDistanceFilter(
        channel: *mut FMOD_CHANNEL,
        custom: FMOD_BOOL,
        customLevel: f32,
        centerFreq: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_Get3DDistanceFilter(
        channel: *mut FMOD_CHANNEL,
        custom: *mut FMOD_BOOL,
        customLevel: *mut f32,
        centerFreq: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetUserData(
        channel: *mut FMOD_CHANNEL,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetUserData(
        channel: *mut FMOD_CHANNEL,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetFrequency(channel: *mut FMOD_CHANNEL, frequency: f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetFrequency(
        channel: *mut FMOD_CHANNEL,
        frequency: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetPriority(
        channel: *mut FMOD_CHANNEL,
        priority: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetPriority(
        channel: *mut FMOD_CHANNEL,
        priority: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetPosition(
        channel: *mut FMOD_CHANNEL,
        position: ::std::os::raw::c_uint,
        postype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetPosition(
        channel: *mut FMOD_CHANNEL,
        position: *mut ::std::os::raw::c_uint,
        postype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetChannelGroup(
        channel: *mut FMOD_CHANNEL,
        channelgroup: *mut FMOD_CHANNELGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetChannelGroup(
        channel: *mut FMOD_CHANNEL,
        channelgroup: *mut *mut FMOD_CHANNELGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetLoopCount(
        channel: *mut FMOD_CHANNEL,
        loopcount: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetLoopCount(
        channel: *mut FMOD_CHANNEL,
        loopcount: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_SetLoopPoints(
        channel: *mut FMOD_CHANNEL,
        loopstart: ::std::os::raw::c_uint,
        loopstarttype: FMOD_TIMEUNIT,
        loopend: ::std::os::raw::c_uint,
        loopendtype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetLoopPoints(
        channel: *mut FMOD_CHANNEL,
        loopstart: *mut ::std::os::raw::c_uint,
        loopstarttype: FMOD_TIMEUNIT,
        loopend: *mut ::std::os::raw::c_uint,
        loopendtype: FMOD_TIMEUNIT,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_IsVirtual(
        channel: *mut FMOD_CHANNEL,
        isvirtual: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetCurrentSound(
        channel: *mut FMOD_CHANNEL,
        sound: *mut *mut FMOD_SOUND,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Channel_GetIndex(
        channel: *mut FMOD_CHANNEL,
        index: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetSystemObject(
        channelgroup: *mut FMOD_CHANNELGROUP,
        system: *mut *mut FMOD_SYSTEM,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Stop(channelgroup: *mut FMOD_CHANNELGROUP) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_SetPaused(
        channelgroup: *mut FMOD_CHANNELGROUP,
        paused: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetPaused(
        channelgroup: *mut FMOD_CHANNELGROUP,
        paused: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_SetVolume(
        channelgroup: *mut FMOD_CHANNELGROUP,
        volume: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetVolume(
        channelgroup: *mut FMOD_CHANNELGROUP,
        volume: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_SetVolumeRamp(
        channelgroup: *mut FMOD_CHANNELGROUP,
        ramp: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetVolumeRamp(
        channelgroup: *mut FMOD_CHANNELGROUP,
        ramp: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetAudibility(
        channelgroup: *mut FMOD_CHANNELGROUP,
        audibility: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_SetPitch(
        channelgroup: *mut FMOD_CHANNELGROUP,
        pitch: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetPitch(
        channelgroup: *mut FMOD_CHANNELGROUP,
        pitch: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_SetMute(
        channelgroup: *mut FMOD_CHANNELGROUP,
        mute: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetMute(
        channelgroup: *mut FMOD_CHANNELGROUP,
        mute: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_SetReverbProperties(
        channelgroup: *mut FMOD_CHANNELGROUP,
        instance: ::std::os::raw::c_int,
        wet: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetReverbProperties(
        channelgroup: *mut FMOD_CHANNELGROUP,
        instance: ::std::os::raw::c_int,
        wet: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_SetLowPassGain(
        channelgroup: *mut FMOD_CHANNELGROUP,
        gain: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetLowPassGain(
        channelgroup: *mut FMOD_CHANNELGROUP,
        gain: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_SetMode(
        channelgroup: *mut FMOD_CHANNELGROUP,
        mode: FMOD_MODE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetMode(
        channelgroup: *mut FMOD_CHANNELGROUP,
        mode: *mut FMOD_MODE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_SetCallback(
        channelgroup: *mut FMOD_CHANNELGROUP,
        callback: FMOD_CHANNELCONTROL_CALLBACK,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_IsPlaying(
        channelgroup: *mut FMOD_CHANNELGROUP,
        isplaying: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_SetPan(channelgroup: *mut FMOD_CHANNELGROUP, pan: f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_SetMixLevelsOutput(
        channelgroup: *mut FMOD_CHANNELGROUP,
        frontleft: f32,
        frontright: f32,
        center: f32,
        lfe: f32,
        surroundleft: f32,
        surroundright: f32,
        backleft: f32,
        backright: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_SetMixLevelsInput(
        channelgroup: *mut FMOD_CHANNELGROUP,
        levels: *mut f32,
        numlevels: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_SetMixMatrix(
        channelgroup: *mut FMOD_CHANNELGROUP,
        matrix: *mut f32,
        outchannels: ::std::os::raw::c_int,
        inchannels: ::std::os::raw::c_int,
        inchannel_hop: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetMixMatrix(
        channelgroup: *mut FMOD_CHANNELGROUP,
        matrix: *mut f32,
        outchannels: *mut ::std::os::raw::c_int,
        inchannels: *mut ::std::os::raw::c_int,
        inchannel_hop: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetDSPClock(
        channelgroup: *mut FMOD_CHANNELGROUP,
        dspclock: *mut ::std::os::raw::c_ulonglong,
        parentclock: *mut ::std::os::raw::c_ulonglong,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_SetDelay(
        channelgroup: *mut FMOD_CHANNELGROUP,
        dspclock_start: ::std::os::raw::c_ulonglong,
        dspclock_end: ::std::os::raw::c_ulonglong,
        stopchannels: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetDelay(
        channelgroup: *mut FMOD_CHANNELGROUP,
        dspclock_start: *mut ::std::os::raw::c_ulonglong,
        dspclock_end: *mut ::std::os::raw::c_ulonglong,
        stopchannels: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_AddFadePoint(
        channelgroup: *mut FMOD_CHANNELGROUP,
        dspclock: ::std::os::raw::c_ulonglong,
        volume: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_SetFadePointRamp(
        channelgroup: *mut FMOD_CHANNELGROUP,
        dspclock: ::std::os::raw::c_ulonglong,
        volume: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_RemoveFadePoints(
        channelgroup: *mut FMOD_CHANNELGROUP,
        dspclock_start: ::std::os::raw::c_ulonglong,
        dspclock_end: ::std::os::raw::c_ulonglong,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetFadePoints(
        channelgroup: *mut FMOD_CHANNELGROUP,
        numpoints: *mut ::std::os::raw::c_uint,
        point_dspclock: *mut ::std::os::raw::c_ulonglong,
        point_volume: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetDSP(
        channelgroup: *mut FMOD_CHANNELGROUP,
        index: ::std::os::raw::c_int,
        dsp: *mut *mut FMOD_DSP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_AddDSP(
        channelgroup: *mut FMOD_CHANNELGROUP,
        index: ::std::os::raw::c_int,
        dsp: *mut FMOD_DSP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_RemoveDSP(
        channelgroup: *mut FMOD_CHANNELGROUP,
        dsp: *mut FMOD_DSP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetNumDSPs(
        channelgroup: *mut FMOD_CHANNELGROUP,
        numdsps: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_SetDSPIndex(
        channelgroup: *mut FMOD_CHANNELGROUP,
        dsp: *mut FMOD_DSP,
        index: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetDSPIndex(
        channelgroup: *mut FMOD_CHANNELGROUP,
        dsp: *mut FMOD_DSP,
        index: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Set3DAttributes(
        channelgroup: *mut FMOD_CHANNELGROUP,
        pos: *const FMOD_VECTOR,
        vel: *const FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Get3DAttributes(
        channelgroup: *mut FMOD_CHANNELGROUP,
        pos: *mut FMOD_VECTOR,
        vel: *mut FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Set3DMinMaxDistance(
        channelgroup: *mut FMOD_CHANNELGROUP,
        mindistance: f32,
        maxdistance: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Get3DMinMaxDistance(
        channelgroup: *mut FMOD_CHANNELGROUP,
        mindistance: *mut f32,
        maxdistance: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Set3DConeSettings(
        channelgroup: *mut FMOD_CHANNELGROUP,
        insideconeangle: f32,
        outsideconeangle: f32,
        outsidevolume: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Get3DConeSettings(
        channelgroup: *mut FMOD_CHANNELGROUP,
        insideconeangle: *mut f32,
        outsideconeangle: *mut f32,
        outsidevolume: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Set3DConeOrientation(
        channelgroup: *mut FMOD_CHANNELGROUP,
        orientation: *mut FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Get3DConeOrientation(
        channelgroup: *mut FMOD_CHANNELGROUP,
        orientation: *mut FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Set3DCustomRolloff(
        channelgroup: *mut FMOD_CHANNELGROUP,
        points: *mut FMOD_VECTOR,
        numpoints: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Get3DCustomRolloff(
        channelgroup: *mut FMOD_CHANNELGROUP,
        points: *mut *mut FMOD_VECTOR,
        numpoints: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Set3DOcclusion(
        channelgroup: *mut FMOD_CHANNELGROUP,
        directocclusion: f32,
        reverbocclusion: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Get3DOcclusion(
        channelgroup: *mut FMOD_CHANNELGROUP,
        directocclusion: *mut f32,
        reverbocclusion: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Set3DSpread(
        channelgroup: *mut FMOD_CHANNELGROUP,
        angle: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Get3DSpread(
        channelgroup: *mut FMOD_CHANNELGROUP,
        angle: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Set3DLevel(
        channelgroup: *mut FMOD_CHANNELGROUP,
        level: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Get3DLevel(
        channelgroup: *mut FMOD_CHANNELGROUP,
        level: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Set3DDopplerLevel(
        channelgroup: *mut FMOD_CHANNELGROUP,
        level: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Get3DDopplerLevel(
        channelgroup: *mut FMOD_CHANNELGROUP,
        level: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Set3DDistanceFilter(
        channelgroup: *mut FMOD_CHANNELGROUP,
        custom: FMOD_BOOL,
        customLevel: f32,
        centerFreq: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Get3DDistanceFilter(
        channelgroup: *mut FMOD_CHANNELGROUP,
        custom: *mut FMOD_BOOL,
        customLevel: *mut f32,
        centerFreq: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_SetUserData(
        channelgroup: *mut FMOD_CHANNELGROUP,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetUserData(
        channelgroup: *mut FMOD_CHANNELGROUP,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_Release(channelgroup: *mut FMOD_CHANNELGROUP) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_AddGroup(
        channelgroup: *mut FMOD_CHANNELGROUP,
        group: *mut FMOD_CHANNELGROUP,
        propagatedspclock: FMOD_BOOL,
        connection: *mut *mut FMOD_DSPCONNECTION,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetNumGroups(
        channelgroup: *mut FMOD_CHANNELGROUP,
        numgroups: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetGroup(
        channelgroup: *mut FMOD_CHANNELGROUP,
        index: ::std::os::raw::c_int,
        group: *mut *mut FMOD_CHANNELGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetParentGroup(
        channelgroup: *mut FMOD_CHANNELGROUP,
        group: *mut *mut FMOD_CHANNELGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetName(
        channelgroup: *mut FMOD_CHANNELGROUP,
        name: *mut ::std::os::raw::c_char,
        namelen: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetNumChannels(
        channelgroup: *mut FMOD_CHANNELGROUP,
        numchannels: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_ChannelGroup_GetChannel(
        channelgroup: *mut FMOD_CHANNELGROUP,
        index: ::std::os::raw::c_int,
        channel: *mut *mut FMOD_CHANNEL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_Release(soundgroup: *mut FMOD_SOUNDGROUP) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_GetSystemObject(
        soundgroup: *mut FMOD_SOUNDGROUP,
        system: *mut *mut FMOD_SYSTEM,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_SetMaxAudible(
        soundgroup: *mut FMOD_SOUNDGROUP,
        maxaudible: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_GetMaxAudible(
        soundgroup: *mut FMOD_SOUNDGROUP,
        maxaudible: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_SetMaxAudibleBehavior(
        soundgroup: *mut FMOD_SOUNDGROUP,
        behavior: FMOD_SOUNDGROUP_BEHAVIOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_GetMaxAudibleBehavior(
        soundgroup: *mut FMOD_SOUNDGROUP,
        behavior: *mut FMOD_SOUNDGROUP_BEHAVIOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_SetMuteFadeSpeed(
        soundgroup: *mut FMOD_SOUNDGROUP,
        speed: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_GetMuteFadeSpeed(
        soundgroup: *mut FMOD_SOUNDGROUP,
        speed: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_SetVolume(soundgroup: *mut FMOD_SOUNDGROUP, volume: f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_GetVolume(
        soundgroup: *mut FMOD_SOUNDGROUP,
        volume: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_Stop(soundgroup: *mut FMOD_SOUNDGROUP) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_GetName(
        soundgroup: *mut FMOD_SOUNDGROUP,
        name: *mut ::std::os::raw::c_char,
        namelen: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_GetNumSounds(
        soundgroup: *mut FMOD_SOUNDGROUP,
        numsounds: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_GetSound(
        soundgroup: *mut FMOD_SOUNDGROUP,
        index: ::std::os::raw::c_int,
        sound: *mut *mut FMOD_SOUND,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_GetNumPlaying(
        soundgroup: *mut FMOD_SOUNDGROUP,
        numplaying: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_SetUserData(
        soundgroup: *mut FMOD_SOUNDGROUP,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_SoundGroup_GetUserData(
        soundgroup: *mut FMOD_SOUNDGROUP,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_Release(dsp: *mut FMOD_DSP) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetSystemObject(
        dsp: *mut FMOD_DSP,
        system: *mut *mut FMOD_SYSTEM,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_AddInput(
        dsp: *mut FMOD_DSP,
        input: *mut FMOD_DSP,
        connection: *mut *mut FMOD_DSPCONNECTION,
        type_: FMOD_DSPCONNECTION_TYPE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_DisconnectFrom(
        dsp: *mut FMOD_DSP,
        target: *mut FMOD_DSP,
        connection: *mut FMOD_DSPCONNECTION,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_DisconnectAll(
        dsp: *mut FMOD_DSP,
        inputs: FMOD_BOOL,
        outputs: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetNumInputs(
        dsp: *mut FMOD_DSP,
        numinputs: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetNumOutputs(
        dsp: *mut FMOD_DSP,
        numoutputs: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetInput(
        dsp: *mut FMOD_DSP,
        index: ::std::os::raw::c_int,
        input: *mut *mut FMOD_DSP,
        inputconnection: *mut *mut FMOD_DSPCONNECTION,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetOutput(
        dsp: *mut FMOD_DSP,
        index: ::std::os::raw::c_int,
        output: *mut *mut FMOD_DSP,
        outputconnection: *mut *mut FMOD_DSPCONNECTION,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_SetActive(dsp: *mut FMOD_DSP, active: FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetActive(dsp: *mut FMOD_DSP, active: *mut FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_SetBypass(dsp: *mut FMOD_DSP, bypass: FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetBypass(dsp: *mut FMOD_DSP, bypass: *mut FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_SetWetDryMix(
        dsp: *mut FMOD_DSP,
        prewet: f32,
        postwet: f32,
        dry: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetWetDryMix(
        dsp: *mut FMOD_DSP,
        prewet: *mut f32,
        postwet: *mut f32,
        dry: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_SetChannelFormat(
        dsp: *mut FMOD_DSP,
        channelmask: FMOD_CHANNELMASK,
        numchannels: ::std::os::raw::c_int,
        source_speakermode: FMOD_SPEAKERMODE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetChannelFormat(
        dsp: *mut FMOD_DSP,
        channelmask: *mut FMOD_CHANNELMASK,
        numchannels: *mut ::std::os::raw::c_int,
        source_speakermode: *mut FMOD_SPEAKERMODE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetOutputChannelFormat(
        dsp: *mut FMOD_DSP,
        inmask: FMOD_CHANNELMASK,
        inchannels: ::std::os::raw::c_int,
        inspeakermode: FMOD_SPEAKERMODE,
        outmask: *mut FMOD_CHANNELMASK,
        outchannels: *mut ::std::os::raw::c_int,
        outspeakermode: *mut FMOD_SPEAKERMODE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_Reset(dsp: *mut FMOD_DSP) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_SetParameterFloat(
        dsp: *mut FMOD_DSP,
        index: ::std::os::raw::c_int,
        value: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_SetParameterInt(
        dsp: *mut FMOD_DSP,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_SetParameterBool(
        dsp: *mut FMOD_DSP,
        index: ::std::os::raw::c_int,
        value: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_SetParameterData(
        dsp: *mut FMOD_DSP,
        index: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        length: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetParameterFloat(
        dsp: *mut FMOD_DSP,
        index: ::std::os::raw::c_int,
        value: *mut f32,
        valuestr: *mut ::std::os::raw::c_char,
        valuestrlen: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetParameterInt(
        dsp: *mut FMOD_DSP,
        index: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_int,
        valuestr: *mut ::std::os::raw::c_char,
        valuestrlen: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetParameterBool(
        dsp: *mut FMOD_DSP,
        index: ::std::os::raw::c_int,
        value: *mut FMOD_BOOL,
        valuestr: *mut ::std::os::raw::c_char,
        valuestrlen: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetParameterData(
        dsp: *mut FMOD_DSP,
        index: ::std::os::raw::c_int,
        data: *mut *mut ::std::os::raw::c_void,
        length: *mut ::std::os::raw::c_uint,
        valuestr: *mut ::std::os::raw::c_char,
        valuestrlen: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetNumParameters(
        dsp: *mut FMOD_DSP,
        numparams: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetParameterInfo(
        dsp: *mut FMOD_DSP,
        index: ::std::os::raw::c_int,
        desc: *mut *mut FMOD_DSP_PARAMETER_DESC,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetDataParameterIndex(
        dsp: *mut FMOD_DSP,
        datatype: ::std::os::raw::c_int,
        index: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_ShowConfigDialog(
        dsp: *mut FMOD_DSP,
        hwnd: *mut ::std::os::raw::c_void,
        show: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetInfo(
        dsp: *mut FMOD_DSP,
        name: *mut ::std::os::raw::c_char,
        version: *mut ::std::os::raw::c_uint,
        channels: *mut ::std::os::raw::c_int,
        configwidth: *mut ::std::os::raw::c_int,
        configheight: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetType(dsp: *mut FMOD_DSP, type_: *mut FMOD_DSP_TYPE) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetIdle(dsp: *mut FMOD_DSP, idle: *mut FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_SetUserData(
        dsp: *mut FMOD_DSP,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetUserData(
        dsp: *mut FMOD_DSP,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_SetMeteringEnabled(
        dsp: *mut FMOD_DSP,
        inputEnabled: FMOD_BOOL,
        outputEnabled: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetMeteringEnabled(
        dsp: *mut FMOD_DSP,
        inputEnabled: *mut FMOD_BOOL,
        outputEnabled: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetMeteringInfo(
        dsp: *mut FMOD_DSP,
        inputInfo: *mut FMOD_DSP_METERING_INFO,
        outputInfo: *mut FMOD_DSP_METERING_INFO,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSP_GetCPUUsage(
        dsp: *mut FMOD_DSP,
        exclusive: *mut ::std::os::raw::c_uint,
        inclusive: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSPConnection_GetInput(
        dspconnection: *mut FMOD_DSPCONNECTION,
        input: *mut *mut FMOD_DSP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSPConnection_GetOutput(
        dspconnection: *mut FMOD_DSPCONNECTION,
        output: *mut *mut FMOD_DSP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSPConnection_SetMix(
        dspconnection: *mut FMOD_DSPCONNECTION,
        volume: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSPConnection_GetMix(
        dspconnection: *mut FMOD_DSPCONNECTION,
        volume: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSPConnection_SetMixMatrix(
        dspconnection: *mut FMOD_DSPCONNECTION,
        matrix: *mut f32,
        outchannels: ::std::os::raw::c_int,
        inchannels: ::std::os::raw::c_int,
        inchannel_hop: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSPConnection_GetMixMatrix(
        dspconnection: *mut FMOD_DSPCONNECTION,
        matrix: *mut f32,
        outchannels: *mut ::std::os::raw::c_int,
        inchannels: *mut ::std::os::raw::c_int,
        inchannel_hop: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSPConnection_GetType(
        dspconnection: *mut FMOD_DSPCONNECTION,
        type_: *mut FMOD_DSPCONNECTION_TYPE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSPConnection_SetUserData(
        dspconnection: *mut FMOD_DSPCONNECTION,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_DSPConnection_GetUserData(
        dspconnection: *mut FMOD_DSPCONNECTION,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_Release(geometry: *mut FMOD_GEOMETRY) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_AddPolygon(
        geometry: *mut FMOD_GEOMETRY,
        directocclusion: f32,
        reverbocclusion: f32,
        doublesided: FMOD_BOOL,
        numvertices: ::std::os::raw::c_int,
        vertices: *const FMOD_VECTOR,
        polygonindex: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_GetNumPolygons(
        geometry: *mut FMOD_GEOMETRY,
        numpolygons: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_GetMaxPolygons(
        geometry: *mut FMOD_GEOMETRY,
        maxpolygons: *mut ::std::os::raw::c_int,
        maxvertices: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_GetPolygonNumVertices(
        geometry: *mut FMOD_GEOMETRY,
        index: ::std::os::raw::c_int,
        numvertices: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_SetPolygonVertex(
        geometry: *mut FMOD_GEOMETRY,
        index: ::std::os::raw::c_int,
        vertexindex: ::std::os::raw::c_int,
        vertex: *const FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_GetPolygonVertex(
        geometry: *mut FMOD_GEOMETRY,
        index: ::std::os::raw::c_int,
        vertexindex: ::std::os::raw::c_int,
        vertex: *mut FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_SetPolygonAttributes(
        geometry: *mut FMOD_GEOMETRY,
        index: ::std::os::raw::c_int,
        directocclusion: f32,
        reverbocclusion: f32,
        doublesided: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_GetPolygonAttributes(
        geometry: *mut FMOD_GEOMETRY,
        index: ::std::os::raw::c_int,
        directocclusion: *mut f32,
        reverbocclusion: *mut f32,
        doublesided: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_SetActive(geometry: *mut FMOD_GEOMETRY, active: FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_GetActive(
        geometry: *mut FMOD_GEOMETRY,
        active: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_SetRotation(
        geometry: *mut FMOD_GEOMETRY,
        forward: *const FMOD_VECTOR,
        up: *const FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_GetRotation(
        geometry: *mut FMOD_GEOMETRY,
        forward: *mut FMOD_VECTOR,
        up: *mut FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_SetPosition(
        geometry: *mut FMOD_GEOMETRY,
        position: *const FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_GetPosition(
        geometry: *mut FMOD_GEOMETRY,
        position: *mut FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_SetScale(
        geometry: *mut FMOD_GEOMETRY,
        scale: *const FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_GetScale(
        geometry: *mut FMOD_GEOMETRY,
        scale: *mut FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_Save(
        geometry: *mut FMOD_GEOMETRY,
        data: *mut ::std::os::raw::c_void,
        datasize: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_SetUserData(
        geometry: *mut FMOD_GEOMETRY,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Geometry_GetUserData(
        geometry: *mut FMOD_GEOMETRY,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Reverb3D_Release(reverb3d: *mut FMOD_REVERB3D) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Reverb3D_Set3DAttributes(
        reverb3d: *mut FMOD_REVERB3D,
        position: *const FMOD_VECTOR,
        mindistance: f32,
        maxdistance: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Reverb3D_Get3DAttributes(
        reverb3d: *mut FMOD_REVERB3D,
        position: *mut FMOD_VECTOR,
        mindistance: *mut f32,
        maxdistance: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Reverb3D_SetProperties(
        reverb3d: *mut FMOD_REVERB3D,
        properties: *const FMOD_REVERB_PROPERTIES,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Reverb3D_GetProperties(
        reverb3d: *mut FMOD_REVERB3D,
        properties: *mut FMOD_REVERB_PROPERTIES,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Reverb3D_SetActive(reverb3d: *mut FMOD_REVERB3D, active: FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Reverb3D_GetActive(
        reverb3d: *mut FMOD_REVERB3D,
        active: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Reverb3D_SetUserData(
        reverb3d: *mut FMOD_REVERB3D,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Reverb3D_GetUserData(
        reverb3d: *mut FMOD_REVERB3D,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_STUDIO_SYSTEM {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_STUDIO_EVENTDESCRIPTION {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_STUDIO_EVENTINSTANCE {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_STUDIO_BUS {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_STUDIO_VCA {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_STUDIO_BANK {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_STUDIO_COMMANDREPLAY {
    _unused: [u8; 0],
}
pub type FMOD_STUDIO_INITFLAGS = ::std::os::raw::c_uint;
pub type FMOD_STUDIO_PARAMETER_FLAGS = ::std::os::raw::c_uint;
pub type FMOD_STUDIO_SYSTEM_CALLBACK_TYPE = ::std::os::raw::c_uint;
pub type FMOD_STUDIO_EVENT_CALLBACK_TYPE = ::std::os::raw::c_uint;
pub type FMOD_STUDIO_LOAD_BANK_FLAGS = ::std::os::raw::c_uint;
pub type FMOD_STUDIO_COMMANDCAPTURE_FLAGS = ::std::os::raw::c_uint;
pub type FMOD_STUDIO_COMMANDREPLAY_FLAGS = ::std::os::raw::c_uint;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_STUDIO_LOADING_STATE {
    FMOD_STUDIO_LOADING_STATE_UNLOADING = 0,
    FMOD_STUDIO_LOADING_STATE_UNLOADED = 1,
    FMOD_STUDIO_LOADING_STATE_LOADING = 2,
    FMOD_STUDIO_LOADING_STATE_LOADED = 3,
    FMOD_STUDIO_LOADING_STATE_ERROR = 4,
    FMOD_STUDIO_LOADING_STATE_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_STUDIO_LOAD_MEMORY_MODE {
    FMOD_STUDIO_LOAD_MEMORY = 0,
    FMOD_STUDIO_LOAD_MEMORY_POINT = 1,
    FMOD_STUDIO_LOAD_MEMORY_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_STUDIO_PARAMETER_TYPE {
    FMOD_STUDIO_PARAMETER_GAME_CONTROLLED = 0,
    FMOD_STUDIO_PARAMETER_AUTOMATIC_DISTANCE = 1,
    FMOD_STUDIO_PARAMETER_AUTOMATIC_EVENT_CONE_ANGLE = 2,
    FMOD_STUDIO_PARAMETER_AUTOMATIC_EVENT_ORIENTATION = 3,
    FMOD_STUDIO_PARAMETER_AUTOMATIC_DIRECTION = 4,
    FMOD_STUDIO_PARAMETER_AUTOMATIC_ELEVATION = 5,
    FMOD_STUDIO_PARAMETER_AUTOMATIC_LISTENER_ORIENTATION = 6,
    FMOD_STUDIO_PARAMETER_AUTOMATIC_SPEED = 7,
    FMOD_STUDIO_PARAMETER_AUTOMATIC_SPEED_ABSOLUTE = 8,
    FMOD_STUDIO_PARAMETER_MAX = 9,
    FMOD_STUDIO_PARAMETER_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_STUDIO_USER_PROPERTY_TYPE {
    FMOD_STUDIO_USER_PROPERTY_TYPE_INTEGER = 0,
    FMOD_STUDIO_USER_PROPERTY_TYPE_BOOLEAN = 1,
    FMOD_STUDIO_USER_PROPERTY_TYPE_FLOAT = 2,
    FMOD_STUDIO_USER_PROPERTY_TYPE_STRING = 3,
    FMOD_STUDIO_USER_PROPERTY_TYPE_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_STUDIO_EVENT_PROPERTY {
    FMOD_STUDIO_EVENT_PROPERTY_CHANNELPRIORITY = 0,
    FMOD_STUDIO_EVENT_PROPERTY_SCHEDULE_DELAY = 1,
    FMOD_STUDIO_EVENT_PROPERTY_SCHEDULE_LOOKAHEAD = 2,
    FMOD_STUDIO_EVENT_PROPERTY_MINIMUM_DISTANCE = 3,
    FMOD_STUDIO_EVENT_PROPERTY_MAXIMUM_DISTANCE = 4,
    FMOD_STUDIO_EVENT_PROPERTY_COOLDOWN = 5,
    FMOD_STUDIO_EVENT_PROPERTY_MAX = 6,
    FMOD_STUDIO_EVENT_PROPERTY_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_STUDIO_PLAYBACK_STATE {
    FMOD_STUDIO_PLAYBACK_PLAYING = 0,
    FMOD_STUDIO_PLAYBACK_SUSTAINING = 1,
    FMOD_STUDIO_PLAYBACK_STOPPED = 2,
    FMOD_STUDIO_PLAYBACK_STARTING = 3,
    FMOD_STUDIO_PLAYBACK_STOPPING = 4,
    FMOD_STUDIO_PLAYBACK_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_STUDIO_STOP_MODE {
    FMOD_STUDIO_STOP_ALLOWFADEOUT = 0,
    FMOD_STUDIO_STOP_IMMEDIATE = 1,
    FMOD_STUDIO_STOP_FORCEINT = 65536,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FMOD_STUDIO_INSTANCETYPE {
    FMOD_STUDIO_INSTANCETYPE_NONE = 0,
    FMOD_STUDIO_INSTANCETYPE_SYSTEM = 1,
    FMOD_STUDIO_INSTANCETYPE_EVENTDESCRIPTION = 2,
    FMOD_STUDIO_INSTANCETYPE_EVENTINSTANCE = 3,
    FMOD_STUDIO_INSTANCETYPE_PARAMETERINSTANCE = 4,
    FMOD_STUDIO_INSTANCETYPE_BUS = 5,
    FMOD_STUDIO_INSTANCETYPE_VCA = 6,
    FMOD_STUDIO_INSTANCETYPE_BANK = 7,
    FMOD_STUDIO_INSTANCETYPE_COMMANDREPLAY = 8,
    FMOD_STUDIO_INSTANCETYPE_FORCEINT = 65536,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_STUDIO_BANK_INFO {
    pub size: ::std::os::raw::c_int,
    pub userdata: *mut ::std::os::raw::c_void,
    pub userdatalength: ::std::os::raw::c_int,
    pub opencallback: FMOD_FILE_OPEN_CALLBACK,
    pub closecallback: FMOD_FILE_CLOSE_CALLBACK,
    pub readcallback: FMOD_FILE_READ_CALLBACK,
    pub seekcallback: FMOD_FILE_SEEK_CALLBACK,
}
#[test]
fn bindgen_test_layout_FMOD_STUDIO_BANK_INFO() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_STUDIO_BANK_INFO>(),
        56usize,
        concat!("Size of: ", stringify!(FMOD_STUDIO_BANK_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_STUDIO_BANK_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_STUDIO_BANK_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_STUDIO_BANK_INFO>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_BANK_INFO),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_STUDIO_BANK_INFO>())).userdata as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_BANK_INFO),
            "::",
            stringify!(userdata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_BANK_INFO>())).userdatalength as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_BANK_INFO),
            "::",
            stringify!(userdatalength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_BANK_INFO>())).opencallback as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_BANK_INFO),
            "::",
            stringify!(opencallback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_BANK_INFO>())).closecallback as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_BANK_INFO),
            "::",
            stringify!(closecallback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_BANK_INFO>())).readcallback as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_BANK_INFO),
            "::",
            stringify!(readcallback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_BANK_INFO>())).seekcallback as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_BANK_INFO),
            "::",
            stringify!(seekcallback)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_STUDIO_PARAMETER_ID {
    pub data1: ::std::os::raw::c_uint,
    pub data2: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_FMOD_STUDIO_PARAMETER_ID() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_STUDIO_PARAMETER_ID>(),
        8usize,
        concat!("Size of: ", stringify!(FMOD_STUDIO_PARAMETER_ID))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_STUDIO_PARAMETER_ID>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_STUDIO_PARAMETER_ID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_STUDIO_PARAMETER_ID>())).data1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_PARAMETER_ID),
            "::",
            stringify!(data1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_STUDIO_PARAMETER_ID>())).data2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_PARAMETER_ID),
            "::",
            stringify!(data2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_STUDIO_PARAMETER_DESCRIPTION {
    pub name: *const ::std::os::raw::c_char,
    pub id: FMOD_STUDIO_PARAMETER_ID,
    pub minimum: f32,
    pub maximum: f32,
    pub defaultvalue: f32,
    pub type_: FMOD_STUDIO_PARAMETER_TYPE,
    pub flags: FMOD_STUDIO_PARAMETER_FLAGS,
}
#[test]
fn bindgen_test_layout_FMOD_STUDIO_PARAMETER_DESCRIPTION() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_STUDIO_PARAMETER_DESCRIPTION>(),
        40usize,
        concat!("Size of: ", stringify!(FMOD_STUDIO_PARAMETER_DESCRIPTION))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_STUDIO_PARAMETER_DESCRIPTION>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(FMOD_STUDIO_PARAMETER_DESCRIPTION)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_PARAMETER_DESCRIPTION>())).name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_PARAMETER_DESCRIPTION),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_PARAMETER_DESCRIPTION>())).id as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_PARAMETER_DESCRIPTION),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_PARAMETER_DESCRIPTION>())).minimum as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_PARAMETER_DESCRIPTION),
            "::",
            stringify!(minimum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_PARAMETER_DESCRIPTION>())).maximum as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_PARAMETER_DESCRIPTION),
            "::",
            stringify!(maximum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_PARAMETER_DESCRIPTION>())).defaultvalue as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_PARAMETER_DESCRIPTION),
            "::",
            stringify!(defaultvalue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_PARAMETER_DESCRIPTION>())).type_ as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_PARAMETER_DESCRIPTION),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_PARAMETER_DESCRIPTION>())).flags as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_PARAMETER_DESCRIPTION),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FMOD_STUDIO_USER_PROPERTY {
    pub name: *const ::std::os::raw::c_char,
    pub type_: FMOD_STUDIO_USER_PROPERTY_TYPE,
    pub __bindgen_anon_1: FMOD_STUDIO_USER_PROPERTY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union FMOD_STUDIO_USER_PROPERTY__bindgen_ty_1 {
    pub intvalue: ::std::os::raw::c_int,
    pub boolvalue: FMOD_BOOL,
    pub floatvalue: f32,
    pub stringvalue: *const ::std::os::raw::c_char,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_FMOD_STUDIO_USER_PROPERTY__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_STUDIO_USER_PROPERTY__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(FMOD_STUDIO_USER_PROPERTY__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_STUDIO_USER_PROPERTY__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(FMOD_STUDIO_USER_PROPERTY__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_USER_PROPERTY__bindgen_ty_1>())).intvalue as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_USER_PROPERTY__bindgen_ty_1),
            "::",
            stringify!(intvalue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_USER_PROPERTY__bindgen_ty_1>())).boolvalue
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_USER_PROPERTY__bindgen_ty_1),
            "::",
            stringify!(boolvalue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_USER_PROPERTY__bindgen_ty_1>())).floatvalue
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_USER_PROPERTY__bindgen_ty_1),
            "::",
            stringify!(floatvalue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_USER_PROPERTY__bindgen_ty_1>())).stringvalue
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_USER_PROPERTY__bindgen_ty_1),
            "::",
            stringify!(stringvalue)
        )
    );
}
#[test]
fn bindgen_test_layout_FMOD_STUDIO_USER_PROPERTY() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_STUDIO_USER_PROPERTY>(),
        24usize,
        concat!("Size of: ", stringify!(FMOD_STUDIO_USER_PROPERTY))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_STUDIO_USER_PROPERTY>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_STUDIO_USER_PROPERTY))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_STUDIO_USER_PROPERTY>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_USER_PROPERTY),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_STUDIO_USER_PROPERTY>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_USER_PROPERTY),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES {
    pub name: *const ::std::os::raw::c_char,
    pub sound: *mut FMOD_SOUND,
    pub subsoundIndex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES>())).name as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES>())).sound as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES),
            "::",
            stringify!(sound)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES>())).subsoundIndex
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_PROGRAMMER_SOUND_PROPERTIES),
            "::",
            stringify!(subsoundIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES {
    pub name: *const ::std::os::raw::c_char,
    pub dsp: *mut FMOD_DSP,
}
#[test]
fn bindgen_test_layout_FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES>())).name as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES>())).dsp as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_PLUGIN_INSTANCE_PROPERTIES),
            "::",
            stringify!(dsp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_STUDIO_TIMELINE_MARKER_PROPERTIES {
    pub name: *const ::std::os::raw::c_char,
    pub position: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FMOD_STUDIO_TIMELINE_MARKER_PROPERTIES() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_STUDIO_TIMELINE_MARKER_PROPERTIES>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(FMOD_STUDIO_TIMELINE_MARKER_PROPERTIES)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_STUDIO_TIMELINE_MARKER_PROPERTIES>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(FMOD_STUDIO_TIMELINE_MARKER_PROPERTIES)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_TIMELINE_MARKER_PROPERTIES>())).name as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_TIMELINE_MARKER_PROPERTIES),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_TIMELINE_MARKER_PROPERTIES>())).position as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_TIMELINE_MARKER_PROPERTIES),
            "::",
            stringify!(position)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES {
    pub bar: ::std::os::raw::c_int,
    pub beat: ::std::os::raw::c_int,
    pub position: ::std::os::raw::c_int,
    pub tempo: f32,
    pub timesignatureupper: ::std::os::raw::c_int,
    pub timesignaturelower: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES>())).bar as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES),
            "::",
            stringify!(bar)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES>())).beat as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES),
            "::",
            stringify!(beat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES>())).position as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES>())).tempo as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES),
            "::",
            stringify!(tempo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES>())).timesignatureupper
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES),
            "::",
            stringify!(timesignatureupper)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES>())).timesignaturelower
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_TIMELINE_BEAT_PROPERTIES),
            "::",
            stringify!(timesignaturelower)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_STUDIO_ADVANCEDSETTINGS {
    pub cbsize: ::std::os::raw::c_int,
    pub commandqueuesize: ::std::os::raw::c_uint,
    pub handleinitialsize: ::std::os::raw::c_uint,
    pub studioupdateperiod: ::std::os::raw::c_int,
    pub idlesampledatapoolsize: ::std::os::raw::c_int,
    pub streamingscheduledelay: ::std::os::raw::c_uint,
    pub encryptionkey: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_FMOD_STUDIO_ADVANCEDSETTINGS() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_STUDIO_ADVANCEDSETTINGS>(),
        32usize,
        concat!("Size of: ", stringify!(FMOD_STUDIO_ADVANCEDSETTINGS))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_STUDIO_ADVANCEDSETTINGS>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_STUDIO_ADVANCEDSETTINGS))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_ADVANCEDSETTINGS>())).cbsize as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_ADVANCEDSETTINGS),
            "::",
            stringify!(cbsize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_ADVANCEDSETTINGS>())).commandqueuesize as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_ADVANCEDSETTINGS),
            "::",
            stringify!(commandqueuesize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_ADVANCEDSETTINGS>())).handleinitialsize as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_ADVANCEDSETTINGS),
            "::",
            stringify!(handleinitialsize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_ADVANCEDSETTINGS>())).studioupdateperiod as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_ADVANCEDSETTINGS),
            "::",
            stringify!(studioupdateperiod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_ADVANCEDSETTINGS>())).idlesampledatapoolsize
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_ADVANCEDSETTINGS),
            "::",
            stringify!(idlesampledatapoolsize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_ADVANCEDSETTINGS>())).streamingscheduledelay
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_ADVANCEDSETTINGS),
            "::",
            stringify!(streamingscheduledelay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_ADVANCEDSETTINGS>())).encryptionkey as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_ADVANCEDSETTINGS),
            "::",
            stringify!(encryptionkey)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_STUDIO_CPU_USAGE {
    pub dspusage: f32,
    pub streamusage: f32,
    pub geometryusage: f32,
    pub updateusage: f32,
    pub studiousage: f32,
}
#[test]
fn bindgen_test_layout_FMOD_STUDIO_CPU_USAGE() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_STUDIO_CPU_USAGE>(),
        20usize,
        concat!("Size of: ", stringify!(FMOD_STUDIO_CPU_USAGE))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_STUDIO_CPU_USAGE>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_STUDIO_CPU_USAGE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_STUDIO_CPU_USAGE>())).dspusage as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_CPU_USAGE),
            "::",
            stringify!(dspusage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_CPU_USAGE>())).streamusage as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_CPU_USAGE),
            "::",
            stringify!(streamusage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_CPU_USAGE>())).geometryusage as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_CPU_USAGE),
            "::",
            stringify!(geometryusage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_CPU_USAGE>())).updateusage as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_CPU_USAGE),
            "::",
            stringify!(updateusage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_CPU_USAGE>())).studiousage as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_CPU_USAGE),
            "::",
            stringify!(studiousage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_STUDIO_BUFFER_INFO {
    pub currentusage: ::std::os::raw::c_int,
    pub peakusage: ::std::os::raw::c_int,
    pub capacity: ::std::os::raw::c_int,
    pub stallcount: ::std::os::raw::c_int,
    pub stalltime: f32,
}
#[test]
fn bindgen_test_layout_FMOD_STUDIO_BUFFER_INFO() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_STUDIO_BUFFER_INFO>(),
        20usize,
        concat!("Size of: ", stringify!(FMOD_STUDIO_BUFFER_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_STUDIO_BUFFER_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_STUDIO_BUFFER_INFO))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_BUFFER_INFO>())).currentusage as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_BUFFER_INFO),
            "::",
            stringify!(currentusage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_BUFFER_INFO>())).peakusage as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_BUFFER_INFO),
            "::",
            stringify!(peakusage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_BUFFER_INFO>())).capacity as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_BUFFER_INFO),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_BUFFER_INFO>())).stallcount as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_BUFFER_INFO),
            "::",
            stringify!(stallcount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_BUFFER_INFO>())).stalltime as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_BUFFER_INFO),
            "::",
            stringify!(stalltime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_STUDIO_BUFFER_USAGE {
    pub studiocommandqueue: FMOD_STUDIO_BUFFER_INFO,
    pub studiohandle: FMOD_STUDIO_BUFFER_INFO,
}
#[test]
fn bindgen_test_layout_FMOD_STUDIO_BUFFER_USAGE() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_STUDIO_BUFFER_USAGE>(),
        40usize,
        concat!("Size of: ", stringify!(FMOD_STUDIO_BUFFER_USAGE))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_STUDIO_BUFFER_USAGE>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_STUDIO_BUFFER_USAGE))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_BUFFER_USAGE>())).studiocommandqueue as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_BUFFER_USAGE),
            "::",
            stringify!(studiocommandqueue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_BUFFER_USAGE>())).studiohandle as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_BUFFER_USAGE),
            "::",
            stringify!(studiohandle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_STUDIO_SOUND_INFO {
    pub name_or_data: *const ::std::os::raw::c_char,
    pub mode: FMOD_MODE,
    pub exinfo: FMOD_CREATESOUNDEXINFO,
    pub subsoundindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FMOD_STUDIO_SOUND_INFO() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_STUDIO_SOUND_INFO>(),
        248usize,
        concat!("Size of: ", stringify!(FMOD_STUDIO_SOUND_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_STUDIO_SOUND_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_STUDIO_SOUND_INFO))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_SOUND_INFO>())).name_or_data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_SOUND_INFO),
            "::",
            stringify!(name_or_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_STUDIO_SOUND_INFO>())).mode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_SOUND_INFO),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FMOD_STUDIO_SOUND_INFO>())).exinfo as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_SOUND_INFO),
            "::",
            stringify!(exinfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_SOUND_INFO>())).subsoundindex as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_SOUND_INFO),
            "::",
            stringify!(subsoundindex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_STUDIO_COMMAND_INFO {
    pub commandname: *const ::std::os::raw::c_char,
    pub parentcommandindex: ::std::os::raw::c_int,
    pub framenumber: ::std::os::raw::c_int,
    pub frametime: f32,
    pub instancetype: FMOD_STUDIO_INSTANCETYPE,
    pub outputtype: FMOD_STUDIO_INSTANCETYPE,
    pub instancehandle: ::std::os::raw::c_uint,
    pub outputhandle: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_FMOD_STUDIO_COMMAND_INFO() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_STUDIO_COMMAND_INFO>(),
        40usize,
        concat!("Size of: ", stringify!(FMOD_STUDIO_COMMAND_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_STUDIO_COMMAND_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(FMOD_STUDIO_COMMAND_INFO))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_COMMAND_INFO>())).commandname as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_COMMAND_INFO),
            "::",
            stringify!(commandname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_COMMAND_INFO>())).parentcommandindex as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_COMMAND_INFO),
            "::",
            stringify!(parentcommandindex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_COMMAND_INFO>())).framenumber as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_COMMAND_INFO),
            "::",
            stringify!(framenumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_COMMAND_INFO>())).frametime as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_COMMAND_INFO),
            "::",
            stringify!(frametime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_COMMAND_INFO>())).instancetype as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_COMMAND_INFO),
            "::",
            stringify!(instancetype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_COMMAND_INFO>())).outputtype as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_COMMAND_INFO),
            "::",
            stringify!(outputtype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_COMMAND_INFO>())).instancehandle as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_COMMAND_INFO),
            "::",
            stringify!(instancehandle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_COMMAND_INFO>())).outputhandle as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_COMMAND_INFO),
            "::",
            stringify!(outputhandle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMOD_STUDIO_MEMORY_USAGE {
    pub exclusive: ::std::os::raw::c_int,
    pub inclusive: ::std::os::raw::c_int,
    pub sampledata: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FMOD_STUDIO_MEMORY_USAGE() {
    assert_eq!(
        ::std::mem::size_of::<FMOD_STUDIO_MEMORY_USAGE>(),
        12usize,
        concat!("Size of: ", stringify!(FMOD_STUDIO_MEMORY_USAGE))
    );
    assert_eq!(
        ::std::mem::align_of::<FMOD_STUDIO_MEMORY_USAGE>(),
        4usize,
        concat!("Alignment of ", stringify!(FMOD_STUDIO_MEMORY_USAGE))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_MEMORY_USAGE>())).exclusive as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_MEMORY_USAGE),
            "::",
            stringify!(exclusive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_MEMORY_USAGE>())).inclusive as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_MEMORY_USAGE),
            "::",
            stringify!(inclusive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FMOD_STUDIO_MEMORY_USAGE>())).sampledata as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMOD_STUDIO_MEMORY_USAGE),
            "::",
            stringify!(sampledata)
        )
    );
}
pub type FMOD_STUDIO_SYSTEM_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        system: *mut FMOD_STUDIO_SYSTEM,
        type_: FMOD_STUDIO_SYSTEM_CALLBACK_TYPE,
        commanddata: *mut ::std::os::raw::c_void,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_STUDIO_EVENT_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        type_: FMOD_STUDIO_EVENT_CALLBACK_TYPE,
        event: *mut FMOD_STUDIO_EVENTINSTANCE,
        parameters: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_STUDIO_COMMANDREPLAY_FRAME_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        replay: *mut FMOD_STUDIO_COMMANDREPLAY,
        commandindex: ::std::os::raw::c_int,
        currenttime: f32,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_STUDIO_COMMANDREPLAY_LOAD_BANK_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        replay: *mut FMOD_STUDIO_COMMANDREPLAY,
        commandindex: ::std::os::raw::c_int,
        bankguid: *const FMOD_GUID,
        bankfilename: *const ::std::os::raw::c_char,
        flags: FMOD_STUDIO_LOAD_BANK_FLAGS,
        bank: *mut *mut FMOD_STUDIO_BANK,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
pub type FMOD_STUDIO_COMMANDREPLAY_CREATE_INSTANCE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        replay: *mut FMOD_STUDIO_COMMANDREPLAY,
        commandindex: ::std::os::raw::c_int,
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        instance: *mut *mut FMOD_STUDIO_EVENTINSTANCE,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT,
>;
extern "C" {
    pub fn FMOD_Studio_ParseID(
        idstring: *const ::std::os::raw::c_char,
        id: *mut FMOD_GUID,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_Create(
        system: *mut *mut FMOD_STUDIO_SYSTEM,
        headerversion: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_IsValid(system: *mut FMOD_STUDIO_SYSTEM) -> FMOD_BOOL;
}
extern "C" {
    pub fn FMOD_Studio_System_SetAdvancedSettings(
        system: *mut FMOD_STUDIO_SYSTEM,
        settings: *mut FMOD_STUDIO_ADVANCEDSETTINGS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetAdvancedSettings(
        system: *mut FMOD_STUDIO_SYSTEM,
        settings: *mut FMOD_STUDIO_ADVANCEDSETTINGS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_Initialize(
        system: *mut FMOD_STUDIO_SYSTEM,
        maxchannels: ::std::os::raw::c_int,
        studioflags: FMOD_STUDIO_INITFLAGS,
        flags: FMOD_INITFLAGS,
        extradriverdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_Release(system: *mut FMOD_STUDIO_SYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_Update(system: *mut FMOD_STUDIO_SYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetCoreSystem(
        system: *mut FMOD_STUDIO_SYSTEM,
        coresystem: *mut *mut FMOD_SYSTEM,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetEvent(
        system: *mut FMOD_STUDIO_SYSTEM,
        pathOrID: *const ::std::os::raw::c_char,
        event: *mut *mut FMOD_STUDIO_EVENTDESCRIPTION,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetBus(
        system: *mut FMOD_STUDIO_SYSTEM,
        pathOrID: *const ::std::os::raw::c_char,
        bus: *mut *mut FMOD_STUDIO_BUS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetVCA(
        system: *mut FMOD_STUDIO_SYSTEM,
        pathOrID: *const ::std::os::raw::c_char,
        vca: *mut *mut FMOD_STUDIO_VCA,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetBank(
        system: *mut FMOD_STUDIO_SYSTEM,
        pathOrID: *const ::std::os::raw::c_char,
        bank: *mut *mut FMOD_STUDIO_BANK,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetEventByID(
        system: *mut FMOD_STUDIO_SYSTEM,
        id: *const FMOD_GUID,
        event: *mut *mut FMOD_STUDIO_EVENTDESCRIPTION,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetBusByID(
        system: *mut FMOD_STUDIO_SYSTEM,
        id: *const FMOD_GUID,
        bus: *mut *mut FMOD_STUDIO_BUS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetVCAByID(
        system: *mut FMOD_STUDIO_SYSTEM,
        id: *const FMOD_GUID,
        vca: *mut *mut FMOD_STUDIO_VCA,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetBankByID(
        system: *mut FMOD_STUDIO_SYSTEM,
        id: *const FMOD_GUID,
        bank: *mut *mut FMOD_STUDIO_BANK,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetSoundInfo(
        system: *mut FMOD_STUDIO_SYSTEM,
        key: *const ::std::os::raw::c_char,
        info: *mut FMOD_STUDIO_SOUND_INFO,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetParameterDescriptionByName(
        system: *mut FMOD_STUDIO_SYSTEM,
        name: *const ::std::os::raw::c_char,
        parameter: *mut FMOD_STUDIO_PARAMETER_DESCRIPTION,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetParameterDescriptionByID(
        system: *mut FMOD_STUDIO_SYSTEM,
        id: FMOD_STUDIO_PARAMETER_ID,
        parameter: *mut FMOD_STUDIO_PARAMETER_DESCRIPTION,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetParameterByID(
        system: *mut FMOD_STUDIO_SYSTEM,
        id: FMOD_STUDIO_PARAMETER_ID,
        value: *mut f32,
        finalvalue: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_SetParameterByID(
        system: *mut FMOD_STUDIO_SYSTEM,
        id: FMOD_STUDIO_PARAMETER_ID,
        value: f32,
        ignoreseekspeed: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_SetParametersByIDs(
        system: *mut FMOD_STUDIO_SYSTEM,
        ids: *const FMOD_STUDIO_PARAMETER_ID,
        values: *mut f32,
        count: ::std::os::raw::c_int,
        ignoreseekspeed: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetParameterByName(
        system: *mut FMOD_STUDIO_SYSTEM,
        name: *const ::std::os::raw::c_char,
        value: *mut f32,
        finalvalue: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_SetParameterByName(
        system: *mut FMOD_STUDIO_SYSTEM,
        name: *const ::std::os::raw::c_char,
        value: f32,
        ignoreseekspeed: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_LookupID(
        system: *mut FMOD_STUDIO_SYSTEM,
        path: *const ::std::os::raw::c_char,
        id: *mut FMOD_GUID,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_LookupPath(
        system: *mut FMOD_STUDIO_SYSTEM,
        id: *const FMOD_GUID,
        path: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        retrieved: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetNumListeners(
        system: *mut FMOD_STUDIO_SYSTEM,
        numlisteners: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_SetNumListeners(
        system: *mut FMOD_STUDIO_SYSTEM,
        numlisteners: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetListenerAttributes(
        system: *mut FMOD_STUDIO_SYSTEM,
        index: ::std::os::raw::c_int,
        attributes: *mut FMOD_3D_ATTRIBUTES,
        attenuationposition: *mut FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_SetListenerAttributes(
        system: *mut FMOD_STUDIO_SYSTEM,
        index: ::std::os::raw::c_int,
        attributes: *const FMOD_3D_ATTRIBUTES,
        attenuationposition: *const FMOD_VECTOR,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetListenerWeight(
        system: *mut FMOD_STUDIO_SYSTEM,
        index: ::std::os::raw::c_int,
        weight: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_SetListenerWeight(
        system: *mut FMOD_STUDIO_SYSTEM,
        index: ::std::os::raw::c_int,
        weight: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_LoadBankFile(
        system: *mut FMOD_STUDIO_SYSTEM,
        filename: *const ::std::os::raw::c_char,
        flags: FMOD_STUDIO_LOAD_BANK_FLAGS,
        bank: *mut *mut FMOD_STUDIO_BANK,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_LoadBankMemory(
        system: *mut FMOD_STUDIO_SYSTEM,
        buffer: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
        mode: FMOD_STUDIO_LOAD_MEMORY_MODE,
        flags: FMOD_STUDIO_LOAD_BANK_FLAGS,
        bank: *mut *mut FMOD_STUDIO_BANK,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_LoadBankCustom(
        system: *mut FMOD_STUDIO_SYSTEM,
        info: *const FMOD_STUDIO_BANK_INFO,
        flags: FMOD_STUDIO_LOAD_BANK_FLAGS,
        bank: *mut *mut FMOD_STUDIO_BANK,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_RegisterPlugin(
        system: *mut FMOD_STUDIO_SYSTEM,
        description: *const FMOD_DSP_DESCRIPTION,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_UnregisterPlugin(
        system: *mut FMOD_STUDIO_SYSTEM,
        name: *const ::std::os::raw::c_char,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_UnloadAll(system: *mut FMOD_STUDIO_SYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_FlushCommands(system: *mut FMOD_STUDIO_SYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_FlushSampleLoading(system: *mut FMOD_STUDIO_SYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_StartCommandCapture(
        system: *mut FMOD_STUDIO_SYSTEM,
        filename: *const ::std::os::raw::c_char,
        flags: FMOD_STUDIO_COMMANDCAPTURE_FLAGS,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_StopCommandCapture(system: *mut FMOD_STUDIO_SYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_LoadCommandReplay(
        system: *mut FMOD_STUDIO_SYSTEM,
        filename: *const ::std::os::raw::c_char,
        flags: FMOD_STUDIO_COMMANDREPLAY_FLAGS,
        replay: *mut *mut FMOD_STUDIO_COMMANDREPLAY,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetBankCount(
        system: *mut FMOD_STUDIO_SYSTEM,
        count: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetBankList(
        system: *mut FMOD_STUDIO_SYSTEM,
        array: *mut *mut FMOD_STUDIO_BANK,
        capacity: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetParameterDescriptionCount(
        system: *mut FMOD_STUDIO_SYSTEM,
        count: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetParameterDescriptionList(
        system: *mut FMOD_STUDIO_SYSTEM,
        array: *mut FMOD_STUDIO_PARAMETER_DESCRIPTION,
        capacity: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetCPUUsage(
        system: *mut FMOD_STUDIO_SYSTEM,
        usage: *mut FMOD_STUDIO_CPU_USAGE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetBufferUsage(
        system: *mut FMOD_STUDIO_SYSTEM,
        usage: *mut FMOD_STUDIO_BUFFER_USAGE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_ResetBufferUsage(system: *mut FMOD_STUDIO_SYSTEM) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_SetCallback(
        system: *mut FMOD_STUDIO_SYSTEM,
        callback: FMOD_STUDIO_SYSTEM_CALLBACK,
        callbackmask: FMOD_STUDIO_SYSTEM_CALLBACK_TYPE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_SetUserData(
        system: *mut FMOD_STUDIO_SYSTEM,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetUserData(
        system: *mut FMOD_STUDIO_SYSTEM,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_System_GetMemoryUsage(
        system: *mut FMOD_STUDIO_SYSTEM,
        memoryusage: *mut FMOD_STUDIO_MEMORY_USAGE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_IsValid(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
    ) -> FMOD_BOOL;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_GetID(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        id: *mut FMOD_GUID,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_GetPath(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        path: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        retrieved: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_GetParameterDescriptionCount(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        count: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_GetParameterDescriptionByIndex(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        index: ::std::os::raw::c_int,
        parameter: *mut FMOD_STUDIO_PARAMETER_DESCRIPTION,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_GetParameterDescriptionByName(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        name: *const ::std::os::raw::c_char,
        parameter: *mut FMOD_STUDIO_PARAMETER_DESCRIPTION,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_GetParameterDescriptionByID(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        id: FMOD_STUDIO_PARAMETER_ID,
        parameter: *mut FMOD_STUDIO_PARAMETER_DESCRIPTION,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_GetUserPropertyCount(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        count: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_GetUserPropertyByIndex(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        index: ::std::os::raw::c_int,
        property: *mut FMOD_STUDIO_USER_PROPERTY,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_GetUserProperty(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        name: *const ::std::os::raw::c_char,
        property: *mut FMOD_STUDIO_USER_PROPERTY,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_GetLength(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        length: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_GetMinimumDistance(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        distance: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_GetMaximumDistance(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        distance: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_GetSoundSize(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        size: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_IsSnapshot(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        snapshot: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_IsOneshot(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        oneshot: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_IsStream(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        isStream: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_Is3D(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        is3D: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_HasCue(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        cue: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_CreateInstance(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        instance: *mut *mut FMOD_STUDIO_EVENTINSTANCE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_GetInstanceCount(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        count: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_GetInstanceList(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        array: *mut *mut FMOD_STUDIO_EVENTINSTANCE,
        capacity: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_LoadSampleData(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_UnloadSampleData(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_GetSampleLoadingState(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        state: *mut FMOD_STUDIO_LOADING_STATE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_ReleaseAllInstances(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_SetCallback(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        callback: FMOD_STUDIO_EVENT_CALLBACK,
        callbackmask: FMOD_STUDIO_EVENT_CALLBACK_TYPE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_GetUserData(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventDescription_SetUserData(
        eventdescription: *mut FMOD_STUDIO_EVENTDESCRIPTION,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_IsValid(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
    ) -> FMOD_BOOL;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_GetDescription(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        description: *mut *mut FMOD_STUDIO_EVENTDESCRIPTION,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_GetVolume(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        volume: *mut f32,
        finalvolume: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_SetVolume(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        volume: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_GetPitch(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        pitch: *mut f32,
        finalpitch: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_SetPitch(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        pitch: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_Get3DAttributes(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        attributes: *mut FMOD_3D_ATTRIBUTES,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_Set3DAttributes(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        attributes: *mut FMOD_3D_ATTRIBUTES,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_GetListenerMask(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        mask: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_SetListenerMask(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        mask: ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_GetProperty(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        index: FMOD_STUDIO_EVENT_PROPERTY,
        value: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_SetProperty(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        index: FMOD_STUDIO_EVENT_PROPERTY,
        value: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_GetReverbLevel(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        index: ::std::os::raw::c_int,
        level: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_SetReverbLevel(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        index: ::std::os::raw::c_int,
        level: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_GetPaused(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        paused: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_SetPaused(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        paused: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_Start(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_Stop(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        mode: FMOD_STUDIO_STOP_MODE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_GetTimelinePosition(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        position: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_SetTimelinePosition(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        position: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_GetPlaybackState(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        state: *mut FMOD_STUDIO_PLAYBACK_STATE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_GetChannelGroup(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        group: *mut *mut FMOD_CHANNELGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_Release(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_IsVirtual(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        virtualstate: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_GetParameterByName(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        name: *const ::std::os::raw::c_char,
        value: *mut f32,
        finalvalue: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_SetParameterByName(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        name: *const ::std::os::raw::c_char,
        value: f32,
        ignoreseekspeed: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_GetParameterByID(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        id: FMOD_STUDIO_PARAMETER_ID,
        value: *mut f32,
        finalvalue: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_SetParameterByID(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        id: FMOD_STUDIO_PARAMETER_ID,
        value: f32,
        ignoreseekspeed: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_SetParametersByIDs(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        ids: *const FMOD_STUDIO_PARAMETER_ID,
        values: *mut f32,
        count: ::std::os::raw::c_int,
        ignoreseekspeed: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_TriggerCue(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_SetCallback(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        callback: FMOD_STUDIO_EVENT_CALLBACK,
        callbackmask: FMOD_STUDIO_EVENT_CALLBACK_TYPE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_GetUserData(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_SetUserData(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_GetCPUUsage(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        exclusive: *mut ::std::os::raw::c_uint,
        inclusive: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_EventInstance_GetMemoryUsage(
        eventinstance: *mut FMOD_STUDIO_EVENTINSTANCE,
        memoryusage: *mut FMOD_STUDIO_MEMORY_USAGE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bus_IsValid(bus: *mut FMOD_STUDIO_BUS) -> FMOD_BOOL;
}
extern "C" {
    pub fn FMOD_Studio_Bus_GetID(bus: *mut FMOD_STUDIO_BUS, id: *mut FMOD_GUID) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bus_GetPath(
        bus: *mut FMOD_STUDIO_BUS,
        path: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        retrieved: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bus_GetVolume(
        bus: *mut FMOD_STUDIO_BUS,
        volume: *mut f32,
        finalvolume: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bus_SetVolume(bus: *mut FMOD_STUDIO_BUS, volume: f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bus_GetPaused(
        bus: *mut FMOD_STUDIO_BUS,
        paused: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bus_SetPaused(bus: *mut FMOD_STUDIO_BUS, paused: FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bus_GetMute(bus: *mut FMOD_STUDIO_BUS, mute: *mut FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bus_SetMute(bus: *mut FMOD_STUDIO_BUS, mute: FMOD_BOOL) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bus_StopAllEvents(
        bus: *mut FMOD_STUDIO_BUS,
        mode: FMOD_STUDIO_STOP_MODE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bus_LockChannelGroup(bus: *mut FMOD_STUDIO_BUS) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bus_UnlockChannelGroup(bus: *mut FMOD_STUDIO_BUS) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bus_GetChannelGroup(
        bus: *mut FMOD_STUDIO_BUS,
        group: *mut *mut FMOD_CHANNELGROUP,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bus_GetCPUUsage(
        bus: *mut FMOD_STUDIO_BUS,
        exclusive: *mut ::std::os::raw::c_uint,
        inclusive: *mut ::std::os::raw::c_uint,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bus_GetMemoryUsage(
        bus: *mut FMOD_STUDIO_BUS,
        memoryusage: *mut FMOD_STUDIO_MEMORY_USAGE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_VCA_IsValid(vca: *mut FMOD_STUDIO_VCA) -> FMOD_BOOL;
}
extern "C" {
    pub fn FMOD_Studio_VCA_GetID(vca: *mut FMOD_STUDIO_VCA, id: *mut FMOD_GUID) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_VCA_GetPath(
        vca: *mut FMOD_STUDIO_VCA,
        path: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        retrieved: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_VCA_GetVolume(
        vca: *mut FMOD_STUDIO_VCA,
        volume: *mut f32,
        finalvolume: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_VCA_SetVolume(vca: *mut FMOD_STUDIO_VCA, volume: f32) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bank_IsValid(bank: *mut FMOD_STUDIO_BANK) -> FMOD_BOOL;
}
extern "C" {
    pub fn FMOD_Studio_Bank_GetID(bank: *mut FMOD_STUDIO_BANK, id: *mut FMOD_GUID) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bank_GetPath(
        bank: *mut FMOD_STUDIO_BANK,
        path: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        retrieved: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bank_Unload(bank: *mut FMOD_STUDIO_BANK) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bank_LoadSampleData(bank: *mut FMOD_STUDIO_BANK) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bank_UnloadSampleData(bank: *mut FMOD_STUDIO_BANK) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bank_GetLoadingState(
        bank: *mut FMOD_STUDIO_BANK,
        state: *mut FMOD_STUDIO_LOADING_STATE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bank_GetSampleLoadingState(
        bank: *mut FMOD_STUDIO_BANK,
        state: *mut FMOD_STUDIO_LOADING_STATE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bank_GetStringCount(
        bank: *mut FMOD_STUDIO_BANK,
        count: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bank_GetStringInfo(
        bank: *mut FMOD_STUDIO_BANK,
        index: ::std::os::raw::c_int,
        id: *mut FMOD_GUID,
        path: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        retrieved: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bank_GetEventCount(
        bank: *mut FMOD_STUDIO_BANK,
        count: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bank_GetEventList(
        bank: *mut FMOD_STUDIO_BANK,
        array: *mut *mut FMOD_STUDIO_EVENTDESCRIPTION,
        capacity: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bank_GetBusCount(
        bank: *mut FMOD_STUDIO_BANK,
        count: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bank_GetBusList(
        bank: *mut FMOD_STUDIO_BANK,
        array: *mut *mut FMOD_STUDIO_BUS,
        capacity: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bank_GetVCACount(
        bank: *mut FMOD_STUDIO_BANK,
        count: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bank_GetVCAList(
        bank: *mut FMOD_STUDIO_BANK,
        array: *mut *mut FMOD_STUDIO_VCA,
        capacity: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bank_GetUserData(
        bank: *mut FMOD_STUDIO_BANK,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_Bank_SetUserData(
        bank: *mut FMOD_STUDIO_BANK,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_CommandReplay_IsValid(replay: *mut FMOD_STUDIO_COMMANDREPLAY) -> FMOD_BOOL;
}
extern "C" {
    pub fn FMOD_Studio_CommandReplay_GetSystem(
        replay: *mut FMOD_STUDIO_COMMANDREPLAY,
        system: *mut *mut FMOD_STUDIO_SYSTEM,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_CommandReplay_GetLength(
        replay: *mut FMOD_STUDIO_COMMANDREPLAY,
        length: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_CommandReplay_GetCommandCount(
        replay: *mut FMOD_STUDIO_COMMANDREPLAY,
        count: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_CommandReplay_GetCommandInfo(
        replay: *mut FMOD_STUDIO_COMMANDREPLAY,
        commandindex: ::std::os::raw::c_int,
        info: *mut FMOD_STUDIO_COMMAND_INFO,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_CommandReplay_GetCommandString(
        replay: *mut FMOD_STUDIO_COMMANDREPLAY,
        commandindex: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_CommandReplay_GetCommandAtTime(
        replay: *mut FMOD_STUDIO_COMMANDREPLAY,
        time: f32,
        commandindex: *mut ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_CommandReplay_SetBankPath(
        replay: *mut FMOD_STUDIO_COMMANDREPLAY,
        bankPath: *const ::std::os::raw::c_char,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_CommandReplay_Start(replay: *mut FMOD_STUDIO_COMMANDREPLAY) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_CommandReplay_Stop(replay: *mut FMOD_STUDIO_COMMANDREPLAY) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_CommandReplay_SeekToTime(
        replay: *mut FMOD_STUDIO_COMMANDREPLAY,
        time: f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_CommandReplay_SeekToCommand(
        replay: *mut FMOD_STUDIO_COMMANDREPLAY,
        commandindex: ::std::os::raw::c_int,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_CommandReplay_GetPaused(
        replay: *mut FMOD_STUDIO_COMMANDREPLAY,
        paused: *mut FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_CommandReplay_SetPaused(
        replay: *mut FMOD_STUDIO_COMMANDREPLAY,
        paused: FMOD_BOOL,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_CommandReplay_GetPlaybackState(
        replay: *mut FMOD_STUDIO_COMMANDREPLAY,
        state: *mut FMOD_STUDIO_PLAYBACK_STATE,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_CommandReplay_GetCurrentCommand(
        replay: *mut FMOD_STUDIO_COMMANDREPLAY,
        commandindex: *mut ::std::os::raw::c_int,
        currenttime: *mut f32,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_CommandReplay_Release(replay: *mut FMOD_STUDIO_COMMANDREPLAY)
        -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_CommandReplay_SetFrameCallback(
        replay: *mut FMOD_STUDIO_COMMANDREPLAY,
        callback: FMOD_STUDIO_COMMANDREPLAY_FRAME_CALLBACK,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_CommandReplay_SetLoadBankCallback(
        replay: *mut FMOD_STUDIO_COMMANDREPLAY,
        callback: FMOD_STUDIO_COMMANDREPLAY_LOAD_BANK_CALLBACK,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_CommandReplay_SetCreateInstanceCallback(
        replay: *mut FMOD_STUDIO_COMMANDREPLAY,
        callback: FMOD_STUDIO_COMMANDREPLAY_CREATE_INSTANCE_CALLBACK,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_CommandReplay_GetUserData(
        replay: *mut FMOD_STUDIO_COMMANDREPLAY,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
extern "C" {
    pub fn FMOD_Studio_CommandReplay_SetUserData(
        replay: *mut FMOD_STUDIO_COMMANDREPLAY,
        userdata: *mut ::std::os::raw::c_void,
    ) -> FMOD_RESULT;
}
